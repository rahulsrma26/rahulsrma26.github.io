{"componentChunkName":"component---src-templates-articles-index-js","path":"/articles/zfs-mirror","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Creating mirrored zfs on Debian","description":"ZFS is a powerful filesystem that combines the functionality of a volume manager with a filesystem. One of its key features is the ability to create mirrored storage pools for redundancy and increased reliability. This guide will walk you through the process of creating a mirrored ZFS pool on Debian (Ubuntu/Mint etc) using SATA SSDs.","tags":["linux","shell","filesystem","ai-assisted-blog"],"date":"2024-08-04T00:00:00.000Z","image":{"id":"face9275-b43f-5a0b-b2cb-07493e21c106","publicURL":"/static/843825257b8e3abc296fea9399814b38/preview.jpg"}},"fields":{"slug":"zfs-mirror","postType":"articles"},"html":"<p>I recently acquired two high-endurance Intel SATA SSDs: the <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/product-specifications/ssd-dc-s3710-spec.pdf\">Intel DC S3710</a> and <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/product-specifications/ssd-dc-s3700-spec.pdf\">Intel DC S3700</a>.</p>\n<h3>Advantages of ZFS:</h3>\n<ul>\n<li><strong>Pooled Storage</strong>: Combine multiple drives into a single storage pool.</li>\n<li><strong>Copy-on-Write</strong>: Ensures data is never overwritten in place, enhancing data integrity.</li>\n<li><strong>Snapshots</strong>: Create point-in-time copies of your data for easy recovery.</li>\n<li><strong>Data Integrity Verification and Automatic Repair</strong>: Detects and corrects data corruption automatically.</li>\n<li><strong>RAID-Z</strong>: Provides RAID-like redundancy with the benefits of ZFS.</li>\n</ul>\n<p>I primarily use ZFS for mirroring (RAID-Z) and data integrity. Since both SSDs are enterprise-grade drives previously used in servers, my goal is to create a mirrored pool to ensure data redundancy and reliability.</p>\n<h2>Prerequisites</h2>\n<p>Before you begin, ensure you have:</p>\n<ul>\n<li>Using debian flavor OS on a separate boot drive (my case NVME SSD).</li>\n<li>Two extra SATA SSDs to create the mirrored ZFS pool.</li>\n<li>Basic knowledge of command-line operations.</li>\n</ul>\n<h2>Step 1: Install ZFS Utilities</h2>\n<p>First, you need to install the ZFS utilities. Open a terminal and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> zfsutils-linux</code></pre></div>\n<h2>Step 2: Prepare the SATA SSDs</h2>\n<ol>\n<li>\n<p><strong>Identify the Disks</strong></p>\n<p>Use the <code class=\"language-text\">lsblk</code> or <code class=\"language-text\">fdisk -l</code> command to identify your SATA SSDs. Assume they are <code class=\"language-text\">/dev/sdb</code> and <code class=\"language-text\">/dev/sdc</code>.</p>\n<p><code class=\"language-text\">lsblk</code> should output something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nsda           <span class=\"token number\">8</span>:0    <span class=\"token number\">0</span>   <span class=\"token number\">1</span>.8T  <span class=\"token number\">0</span> disk \nsdb           <span class=\"token number\">8</span>:16   <span class=\"token number\">0</span> <span class=\"token number\">372</span>.6G  <span class=\"token number\">0</span> disk \nsdc           <span class=\"token number\">8</span>:32   <span class=\"token number\">0</span> <span class=\"token number\">372</span>.6G  <span class=\"token number\">0</span> disk \nnvme0n1     <span class=\"token number\">259</span>:0    <span class=\"token number\">0</span> <span class=\"token number\">931</span>.5G  <span class=\"token number\">0</span> disk \n├─nvme0n1p1 <span class=\"token number\">259</span>:1    <span class=\"token number\">0</span>   524M  <span class=\"token number\">0</span> part /boot/efi\n├─nvme0n1p2 <span class=\"token number\">259</span>:2    <span class=\"token number\">0</span> <span class=\"token number\">465</span>.2G  <span class=\"token number\">0</span> part /\n└─nvme0n1p3 <span class=\"token number\">259</span>:3    <span class=\"token number\">0</span> <span class=\"token number\">465</span>.8G  <span class=\"token number\">0</span> part</code></pre></div>\n<p>or <code class=\"language-text\">fdisk -l</code> should have something like this</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Disk /dev/nvme0n1: <span class=\"token number\">931.51</span> GiB, <span class=\"token number\">1000204886016</span> bytes, <span class=\"token number\">1953525168</span> sectors\nDisk model: CT1000P3SSD8                            \n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nDisk /dev/sdb: <span class=\"token number\">372.61</span> GiB, <span class=\"token number\">400088457216</span> bytes, <span class=\"token number\">781422768</span> sectors\nDisk model: INTEL SSDSC2BA40\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nDisk /dev/sdc: <span class=\"token number\">372.61</span> GiB, <span class=\"token number\">400088457216</span> bytes, <span class=\"token number\">781422768</span> sectors\nDisk model: INTEL SSDSC2BA40\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n</li>\n<li>\n<p><strong>Partition the Disks (Optional)</strong></p>\n<p>If you want to create partitions, use <code class=\"language-text\">fdisk</code> or <code class=\"language-text\">parted</code>. For simplicity, we will use the entire disks.</p>\n</li>\n</ol>\n<h2>Step 3: Create the ZFS Pool</h2>\n<p>To create a mirrored ZFS pool, use the <code class=\"language-text\">zpool create</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool create mypool mirror /dev/sdb /dev/sdc</code></pre></div>\n<p>In this command:</p>\n<ul>\n<li><code class=\"language-text\">mypool</code> is the name of your ZFS pool.</li>\n<li><code class=\"language-text\">mirror</code> specifies that the disks will be mirrored.</li>\n<li><code class=\"language-text\">/dev/sdb</code> and <code class=\"language-text\">/dev/sdc</code> are the SATA SSDs.</li>\n</ul>\n<h2>Step 4: Verify the Pool</h2>\n<p>Check the status of your ZFS pool to ensure it's created correctly:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool status</code></pre></div>\n<p>You should see output indicating that the pool <code class=\"language-text\">mypool</code> is created and the disks are mirrored.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  pool: mypool\n state: ONLINE\nconfig:\n\n    NAME      STATE     READ WRITE CKSUM\n     mypool   ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n    mirror-0  ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n      sdb     ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n      sdc     ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n\nerrors: No known data errors</code></pre></div>\n<h2>Step 5: Create a ZFS Filesystem</h2>\n<p>Create a ZFS filesystem within your pool:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs create mypool/mydataset</code></pre></div>\n<p>Replace <code class=\"language-text\">mypool/mydataset</code> with your preferred dataset name.</p>\n<h2>Step 6: Mount the Filesystem</h2>\n<p>ZFS filesystems are mounted automatically by default. You can check the mount point with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs get mountpoint mypool/mydataset</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NAME              PROPERTY    VALUE              SOURCE\nmypool/mydataset  mountpoint  /mypool/mydataset  default</code></pre></div>\n<p>If you need to change the mount point, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">mountpoint</span><span class=\"token operator\">=</span>/path/to/mount mypool/mydataset</code></pre></div>\n<p>Replace <code class=\"language-text\">/path/to/mount</code> with your desired directory.</p>\n<h2>Step 7: Check Space Usage</h2>\n<p>To check the free space available on your ZFS pool, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool list</code></pre></div>\n<p>This command provides an overview of the pool’s capacity, including the total space, used space, and free space.</p>\n<p>Example Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NAME    SIZE  ALLOC   FREE    CAP  DEDUP  HEALTH  ALTROOT\nmypool  <span class=\"token number\">1</span>.00T  200G   800G    <span class=\"token number\">20</span>%  <span class=\"token number\">1</span>.00x  ONLINE  -</code></pre></div>\n<p>In this example:</p>\n<ul>\n<li><code class=\"language-text\">SIZE</code> is the total size of the pool.</li>\n<li><code class=\"language-text\">ALLOC</code> is the amount of space currently allocated.</li>\n<li><code class=\"language-text\">FREE</code> is the amount of free space available.</li>\n<li><code class=\"language-text\">CAP</code> is the percentage of space used.</li>\n</ul>\n<p>To see space usage for a specific ZFS filesystem or dataset, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs list</code></pre></div>\n<p>To get detailed information about a dataset, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs get all mypool/mydataset</code></pre></div>\n<h2>Things to keep in mind</h2>\n<h3>1. User Access</h3>\n<p>Since we are running almost all of the commands as <code class=\"language-text\">sudo</code> local user won;t have access to newly created mount. We can use <code class=\"language-text\">chown</code> command to give access to current user.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chown</span> -R <span class=\"token environment constant\">$USER</span> /mypool/mydataset</code></pre></div>\n<h3>2. Monitoring and Maintenance</h3>\n<p>Proper maintenance of your ZFS pool is crucial for ensuring long-term performance and data integrity. Two important maintenance tasks are running TRIM and SCRUB operations. Here’s a guide on how to perform these tasks:</p>\n<h3><strong>2.1. Running TRIM</strong></h3>\n<p><strong>TRIM</strong> is a command used to inform the SSD that certain blocks of data are no longer in use and can be cleaned up. This helps in maintaining SSD performance and prolonging the lifespan of the drives.</p>\n<h4><strong>Why TRIM?</strong></h4>\n<ul>\n<li><strong>Performance:</strong> Helps SSDs maintain their performance by freeing up unused blocks.</li>\n<li><strong>Lifespan:</strong> Reduces unnecessary write operations, which can extend the lifespan of the SSD.</li>\n</ul>\n<h4><strong>How to Enable and Run TRIM:</strong></h4>\n<ol>\n<li>\n<p><strong>Check if TRIM is Enabled:</strong></p>\n<p>To ensure TRIM is enabled on your ZFS pool, check the <code class=\"language-text\">autotrim</code> property:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool get autotrim mypool</code></pre></div>\n<p>If <code class=\"language-text\">autotrim</code> is set to <code class=\"language-text\">off</code>, you should enable it.</p>\n</li>\n<li>\n<p><strong>Enable TRIM:</strong></p>\n<p>Enable TRIM on your ZFS pool with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool <span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">autotrim</span><span class=\"token operator\">=</span>on mypool</code></pre></div>\n<p>This will ensure that TRIM operations are automatically performed on your pool as needed.</p>\n</li>\n<li>\n<p><strong>Manual TRIM (Optional):</strong></p>\n<p>If you want to manually trigger a TRIM operation, use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool trim -a</code></pre></div>\n<p>This command will run TRIM on all datasets in your pool. Depending on the size of your pool and the amount of data, this operation may take some time.</p>\n</li>\n</ol>\n<h3><strong>2.2. Running SCRUB</strong></h3>\n<p><strong>SCRUB</strong> is a maintenance operation that checks the integrity of your ZFS pool’s data. It scans the pool for errors, verifies checksums, and attempts to correct any detected issues.</p>\n<h4><strong>Why SCRUB?</strong></h4>\n<ul>\n<li><strong>Data Integrity:</strong> Ensures that all data is accurate and free from corruption.</li>\n<li><strong>Error Detection:</strong> Identifies and repairs silent data corruption before it becomes a problem.</li>\n</ul>\n<h4><strong>How to Perform a SCRUB:</strong></h4>\n<ol>\n<li>\n<p><strong>Start a SCRUB Operation:</strong></p>\n<p>Initiate a SCRUB on your ZFS pool with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool scrub mypool</code></pre></div>\n<p>This command starts the SCRUB process, which may take some time depending on the size and health of the pool.</p>\n</li>\n<li>\n<p><strong>Monitor SCRUB Progress:</strong></p>\n<p>To check the status and progress of the SCRUB operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool status</code></pre></div>\n<p>This command will show you detailed information about the SCRUB, including the progress and any errors detected.</p>\n</li>\n<li>\n<p><strong>Review Results:</strong></p>\n<p>After the SCRUB is complete, review the output of the <code class=\"language-text\">zpool status</code> command. It will show if any errors were found and if they were repaired. Regularly reviewing these results helps ensure the ongoing health of your ZFS pool.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">~ <span class=\"token function\">sudo</span> zpool status -t mypool\npool: mypool\nstate: ONLINE\nscan: scrub repaired 0B <span class=\"token keyword\">in</span> 00:06:06 with <span class=\"token number\">0</span> errors on Tue Aug <span class=\"token number\">6</span> <span class=\"token number\">20</span>:58:36 <span class=\"token number\">2024</span>\nconfig:\n\n    NAME      STATE     READ WRITE CKSUM\n      mypool  ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n    mirror-0  ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>\n      sdb     ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">100</span>% trimmed, completed at Tue 06 Aug <span class=\"token number\">2024</span> <span class=\"token number\">20</span>:51:02<span class=\"token punctuation\">)</span>\n      sdc     ONLINE       <span class=\"token number\">0</span>     <span class=\"token number\">0</span>     <span class=\"token number\">0</span>  <span class=\"token punctuation\">(</span><span class=\"token number\">100</span>% trimmed, completed at Tue 06 Aug <span class=\"token number\">2024</span> <span class=\"token number\">20</span>:51:02<span class=\"token punctuation\">)</span>\n\nerrors: No known data errors</code></pre></div>\n</li>\n</ol>\n<p>By regularly running TRIM and SCRUB operations, you ensure that your ZFS pool remains in optimal condition, providing reliable performance and data integrity for your storage needs.</p>\n<h3>3. Limiting RAM usage</h3>\n<p>Managing RAM usage in ZFS is essential for systems with limited memory resources. ZFS utilizes a caching mechanism known as the Adaptive Replacement Cache (ARC) to keep frequently accessed data in RAM, enhancing access speed. By default, ZFS can use up to 50% of the system's memory for ARC. If the system requires additional memory for other tasks, ZFS will automatically release some of the ARC's memory to accommodate those needs, returning it to the pool of available memory. This behavior ensures efficient memory usage while maintaining ZFS performance.</p>\n<p>You can check how much arc is using by running <code class=\"language-text\">arc_summary</code> command. Which will show minimum and maximum amount of memory that will be used for caching:</p>\n<div class=\"gatsby-highlight\" data-language=\"code\"><pre class=\"language-code\"><code class=\"language-code\">...\nARC size (current):                                     1.4 %   56.3 MiB\n        Target size (adaptive):                        25.0 %    1.0 GiB\n        Min size (hard limit):                         25.0 %    1.0 GiB\n        Max size (high water):                           16:1   16.0 GiB\n...</code></pre></div>\n<p>A good rule of thumb will be setting up a minimum of <code class=\"language-text\">1GB</code> and maximum as:</p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">1GB + [1 GB/TB of storage] + [5GB/TB for Dedupe]</code></pre></div>\n<p>Which in my case will approximates to 3.4GB. Since I've plenty of RAM I will be rounding this up to 4GB.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sudo echo &quot;options zfs zfs_arc_max=4294967296&quot; &gt;&gt; /etc/modprobe.d/zfs.conf</code></pre></div>\n<p>After this we need to either <code class=\"language-text\">reboot</code> the system or reload the zfs module.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">sudo modprobe -r zfs\nsudo modprobe zfs</code></pre></div>\n<p>After <code class=\"language-text\">reboot</code> and rerunning <code class=\"language-text\">arc_summary</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"code\"><pre class=\"language-code\"><code class=\"language-code\">        Max size (high water):                            4:1    4.0 GiB</code></pre></div>\n<h3>4. Properly Shut Down the PC</h3>\n<p>Before shutting down, ensure that all data has been correctly copied and that there are no ongoing write operations. You can verify the pool’s status:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zpool status</code></pre></div>\n<p>Since <code class=\"language-text\">zfs</code> has COW (Copy-On-Write) it should be fine even if you have a powerloss. In my case both of the disk also has enhanced power-loss data protection feature.</p>\n<h3>5. Unmount the ZFS Filesystem (Optional)</h3>\n<p>While ZFS usually handles unmounting automatically, you can manually unmount the filesystem if needed:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs unmount mypool/mydataset</code></pre></div>\n<p>If you have multiple datasets, you might need to unmount them individually or use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> zfs unmount -a</code></pre></div>\n<h2>Conclusion</h2>\n<p>By following these steps, you can create a mirrored ZFS pool on Ubuntu or Linux Mint using SATA SSDs. ZFS offers robust data protection features, and a mirrored setup ensures that your data is duplicated across multiple drives for enhanced reliability.</p>\n<p>Always back up important data. Remember the old saying:</p>\n<blockquote>\n<p><strong><a href=\"https://www.raidisnotabackup.com/\">RAID is NOT a backup!</a></strong></p>\n</blockquote>\n<p>Feel free to explore further ZFS features and configurations to optimize your setup based on your specific needs.</p>"}},"pageContext":{"id":"5d357823-8d5a-5a2f-9c2b-8cadbffa32f6"}},"staticQueryHashes":["1271460761","2127526068","3159585216","805030655"]}