{"componentChunkName":"component---src-templates-articles-index-js","path":"/articles/ssh-jump","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Passwordless SSH and Jump servers","description":"Secure Shell (SSH) is a cryptographic network protocol primarily used to do remote command-line, login, and remote command execution. In this post, we will learn how to connect to a remote machine with ssh without entering a password every time. We will also learn how to set up your ssh config for jump servers.","tags":["shell","ssh"],"date":"2020-09-09T00:00:00.000Z"},"fields":{"slug":"ssh-jump","postType":"articles"},"html":"<p>We can use SSH keys to log in to a remote machine instead of a password. SSH keys provide a more secure way of logging into a server than using a password alone. A password can eventually be cracked with a brute force attack, SSH keys are nearly impossible to decipher by brute force alone.</p>\n<p>SSH keys come in a pair: a public and a private key. You can place the public key on any server, and then unlock it by connecting to it with a client that already has the private key. When the two matches up, the system unlocks without the need for a password. </p>\n<p>In this scenario, we are trying to connect to a server machine using our laptop (called the host).</p>\n<p><img src=\"/downloads/67ce6fbd8f760664089a2e14ba02deee/host-server.svg\" alt=\"host-server\"></p>\n<h2>Checking</h2>\n<p>First, we need to check whether the host already has a generated ssh key or not.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ls ~/.ssh/id_rsa*</code></pre></div>\n<p>If you see these two files <code class=\"language-text\">id_rsa</code> and <code class=\"language-text\">id_rsa.pub</code>. Then it may have been generated before.</p>\n<h2>Generating</h2>\n<p>If you don't have these files or <code class=\"language-text\">.ssh</code> directory in your home then you need to generate a key first.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh-keygen -t rsa</code></pre></div>\n<p>You can increase security even more by protecting the private key with a passphrase.</p>\n<p>Now, if you have left things to default, it will generate these two files in <code class=\"language-text\">~/.ssh</code>:</p>\n<ul>\n<li>Private key (id_rsa)</li>\n<li>Public key (id_rsa.pub)</li>\n</ul>\n<h2>Authorizing</h2>\n<p>Now to get authorized using keys we need to copy the content of our Public key to the server.\nLet's assume our server ip is <code class=\"language-text\">192.168.0.123</code> and the username is <code class=\"language-text\">user</code>.</p>\n<p>We can use the cat command with pipe to copy the contents of our public key to the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat ~/.ssh/id_rsa.pub | ssh user@192.168.0.123 &quot;cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></pre></div>\n<p>Once you entered the password for one more time, you can now log in to the server without a password.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh user@192.168.0.123</code></pre></div>\n<h2>Managing multiple servers</h2>\n<p>Managing multiple remote servers requires a very good memory to remember connection options like usernames, remote addresses, ports, and further details. So you may need to document all the details for each server.</p>\n<p>The SSH config file can simplify SSH connections. Create or edit <code class=\"language-text\">~/.ssh/config</code> file and add</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Host web\n    HostName 192.168.0.123\n    User user</code></pre></div>\n<p>Now you can just directly connect using the alias.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh web</code></pre></div>\n<p>You can also specify port if a ssh connection requires it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Host web\n    HostName 192.168.0.123\n    User user\n\nHost db\n    HostName 192.168.0.124\n    User user\n    Port 2222</code></pre></div>\n<h2>Jump server</h2>\n<p>A jump host (also known as a jump server) is an intermediary host or an SSH gateway to a remote network, through which a connection can be made to another host in a dissimilar security zone, for example, a demilitarized zone (DMZ). It bridges two dissimilar security zones and offers controlled access between them.</p>\n<p>A classic scenario is connecting from your laptop to a server in your companyâ€™s internal network, which is highly secured with firewalls to a DMZ. You may access it via a jump host.</p>\n<p><img src=\"/downloads/81d55e8f6fbb57266d589c832cadb7aa/host-jump-main.svg\" alt=\"host-jump-main\"></p>\n<p>Usually you can ssh it directly</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh -J jumpuser@jumpserver:port username@server:port\t</code></pre></div>\n<p>We can specify a jump server as a proxy</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Host alias\n\tUser username\n\tHostName server\n\tProxyCommand ssh -W %h:%p jumpuser@jumpserver:port</code></pre></div>\n<p>You can find more information about the config file <a href=\"https://www.ssh.com/ssh/config/\" target=\"_blank\">here</a>.</p>"}},"pageContext":{"id":"5c22f73a-8e59-5af9-80ad-a2cf95c7d18d"}},"staticQueryHashes":["1271460761","2127526068","3159585216","805030655"]}