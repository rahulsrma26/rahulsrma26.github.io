<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rahul's Backyard</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>Addicted to learning!</description>
    <pubDate>Tue, 12 Jun 2018 05:30:00 +0630</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Pride &amp; Patience (dragonball z painting)</title>
      <link>http://localhost:8080/articles/pride-and-patience/</link>
      <pubDate>Tue, 12 Jun 2018 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/pride-and-patience/</guid>
      <author></author>
      <description>&lt;p&gt;This article contains my thought process behind this painting. Characters belong to
&lt;a href=&quot;https://en.wikipedia.org/wiki/Dragon_Ball_Z&quot; target=&quot;_blank&quot;&gt;Dragon Ball Z&lt;/a&gt; universe and painting is done in
&lt;a href=&quot;https://krita.org/en/&quot; target=&quot;_blank&quot;&gt;Krita&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;final-painting&quot;&gt;Final painting&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp06.jpg&quot; alt=&quot;highlights&quot;&gt;
&lt;a href=&quot;https://rahulsrma26.deviantart.com/art/24-Pride-And-Patience-748779649&quot; target=&quot;_blank&quot;&gt;Deviantart link&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This painting is inspired from
&lt;img src=&quot;/articles/pride-and-patience/ref.jpg&quot; alt=&quot;original&quot;&gt;&lt;/p&gt;
&lt;p&gt;This scene is from one of my favorite saga (android saga) from the show Dragon Ball Z. This is where Vegeta and other Z warriors lose to androids and they just find out that there is an even more powerful villain (cell). Vegeta just goes to the mountains and Trunks follows. Later, Goku arrives and Trunks informs Goku that Vegeta is standing there from last three days. It’s a sunny day with clear sky in the show, which in my opinion doesn’t suits the mood. So, to bring justice to the scene, I’ve altered weather and time.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step-i-sketch&quot;&gt;Step I - Sketch&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp00.jpg&quot; alt=&quot;sketch&quot;&gt;&lt;/p&gt;
&lt;p&gt;I start most of my paintings with a sketch. It gives me an idea regarding size, proportion, perspective and the space around characters.
This process is easier to perform but lot of thought process and tinkering is required.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/pencil_3_large_4b.png&quot; alt=&quot;pencil_3_large_4b&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;step-ii-abstract&quot;&gt;Step II - Abstract&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp01.jpg&quot; alt=&quot;concept&quot;&gt;&lt;/p&gt;
&lt;p&gt;Next step is to make a simple painting in order to finalize my composition and overall concept. Also, I chose some base colors and base lighting, to convey the story in a better form.&lt;/p&gt;
&lt;p&gt;At this stage, I mainly focused on shape and proportions as they will be difficult to amend later. After this stage, the painting is in a good shape.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/charcoal_rock_soft.png&quot; alt=&quot;charcoal_rock_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/bristles_4_glaze.png&quot; alt=&quot;bristles_4_glaze&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/wet_textured_soft.png&quot; alt=&quot;wet_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;step-iii-foreground&quot;&gt;Step III - Foreground&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp02.jpg&quot; alt=&quot;mountain&quot;&gt;&lt;/p&gt;
&lt;p&gt;Apart from background, majority of the area is occupied by the rocks around the characters. I mainly focused on the shades so that extrusions of the rocks become more prominent. Also, added some shadows to Trunks.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/texture_snow_pile.png&quot; alt=&quot;texture_snow_pile&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/texture_reptile.png&quot; alt=&quot;texture_reptile&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;step-iv-background&quot;&gt;Step IV - Background&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp03.jpg&quot; alt=&quot;background&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, I worked on the background. Reshaped the distant mountains. Reshade the clouds, so that they become gloomy and dark. Added a glow to the lightening so that it will be highlighted.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/wet_textured_soft.png&quot; alt=&quot;wet_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/blender_textured_soft.png&quot; alt=&quot;blender_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/adjust_multiply.png&quot; alt=&quot;adjust_multiply&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/basic_5_size.png&quot; alt=&quot;basic_5_size&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;step-v-trunks&quot;&gt;Step V - Trunks&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp04.jpg&quot; alt=&quot;trunks&quot;&gt;&lt;/p&gt;
&lt;p&gt;Reshaded Trunks to better mix it with the environment. Also, painted iconic Capsule Corp logo on the jacket. Rescaled Vegeta according to perspective and distance.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/bristles_4_glaze.png&quot; alt=&quot;bristles_4_glaze&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/wet_textured_soft.png&quot; alt=&quot;wet_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/adjust_multiply.png&quot; alt=&quot;adjust_multiply&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/adjust_dodge.png&quot; alt=&quot;adjust_dodge&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/blender_knife_edge.png&quot; alt=&quot;blender_knife_edge&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/blender_textured_soft.png&quot; alt=&quot;blender_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;h2 id=&quot;step-vi-rain&quot;&gt;Step VI - Rain&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp05.jpg&quot; alt=&quot;rain&quot;&gt;&lt;/p&gt;
&lt;p&gt;Added rain via G’MIC-Qt based on angle that’ll suit the scene. To give an apt look of a heavy rain, I’ve increased the brightness of distant objects and background. Vegeta’s pose is changed to his iconic hands fold standing position.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;step-vii-highlights&quot;&gt;Step VII - Highlights&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/pride-and-patience/pp06.jpg&quot; alt=&quot;highlights&quot;&gt;&lt;/p&gt;
&lt;p&gt;Corrected Trunks head (being too wide). Specular highlights added to show the effect of wet rocks, shining in the thunder. Added the effect of rain trickling down from rocks.&lt;/p&gt;
&lt;p&gt;Now rain drop splashes after hitting Trunks and rocks. Slight brightness and contrast adjusted.&lt;/p&gt;
&lt;p&gt;Brushes:&lt;/p&gt;
&lt;div&gt;
    &lt;img src=&quot;brushes/wet_textured_soft.png&quot; alt=&quot;wet_textured_soft&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/adjust_dodge.png&quot; alt=&quot;adjust_dodge&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
    &lt;img src=&quot;brushes/texture_splat.png&quot; alt=&quot;texture_splat&quot; style=&quot;width:auto; display:inline-block&quot;/&gt;
&lt;/div&gt;</description>
    </item>
    <item>
      <title>Representing Matrix in C++</title>
      <link>http://localhost:8080/articles/representing-matrix-in-cpp/</link>
      <pubDate>Sat, 11 Nov 2017 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/representing-matrix-in-cpp/</guid>
      <author></author>
      <description>&lt;p&gt;Prerequisites: moderate knowledge of C++.
&lt;br/&gt;
Technologies:
&lt;a href=&quot;https://en.wikipedia.org/wiki/C%2B%2B&quot; target=&quot;_blank&quot;&gt;C++&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;http://quick-bench.com/&quot; target=&quot;_blank&quot;&gt;Quick-Bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;script
  src=&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot;
  integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;
  crossorigin=&quot;anonymous&quot;&gt;
&lt;/script&gt;
&lt;link href=&quot;/css/lightbox.min.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;script src=&quot;/scripts/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This article shows a readable way of representing matrix without loosing performance in C++.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-problem&quot;&gt;The Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#matrix-class&quot;&gt;Matrix Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Most of people, who has to deal with the matrices in C++, would be familiar with this problem.&lt;/p&gt;
&lt;p&gt;I’m listing two of the most popular ways for representing matrix. One excels in readability while other in performance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First way is to use vector of vector.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; matrix(rows, &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;(cols));
  &lt;span class=&quot;comment&quot;&gt;// do stuff&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// access like matrix[y][x]&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// no need to free. RAII rocks.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is similar to using double pointer in C for dynamic 2D array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; **matrix = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*[rows];
  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; rows; i++)
      matrix[i] = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[cols];
  &lt;span class=&quot;comment&quot;&gt;// do stuff&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// access like matrix[y][x]&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; rows; i++)
      &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] matrix[i];
  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] matrix;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s basically an array of arrays. Every element of outer array points to another array of integers. That’s why you can reference it two times. But, since every array is separately allocated, to access the array we must have to go to the elements of outer array first and then inner ones. Also, there will be no guarantee that every row will be adjacent to each other in memory. They can be scattered across the heap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second way is to use C style array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* matrix = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[rows*cols];
  &lt;span class=&quot;comment&quot;&gt;// do stuff&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// access like matrix[y*cols+x]&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] matrix;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will make a solid continuous chunk of memory in heap. So, it’ll have a better access time and pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;/h2&gt;
&lt;p&gt;C style array access should perform better than vector style access. As, vector style has to refer two times to access an element, the address of matrix (outer array) can be saved in register but elements has to come from memory (or cache). The other problem is that, at the end of a row next row could be anywhere, and pre-fetcher can not predict next fetch.&lt;/p&gt;
&lt;p&gt;It’s hard to measure the general performance since the use case varies a lot. But to get some idea I’m considering two types of algorithm with square and rectangular matrices. All the results are compiler on GCC 7.2 with c++14 and -O3 flags on linux x86 machine.
For the simplicity sake we have fixed number of rows and columns but it can be easily changed to general inputs.&lt;/p&gt;
&lt;h2 id=&quot;sum-of-all-elements&quot;&gt;Sum of all elements&lt;/h2&gt;
&lt;p&gt;Let us take an example of calculating the sum of all the elements in a matrix. Here are our two popular approaches:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Vector style code for a square matrix&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Similar thing can be achieved in C by int**&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vector_sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; matrix, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)
            sum += matrix[i][j];
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// C style code for a square matrix&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C_style_sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* matrix, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)
            sum += matrix[i * N + j];
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results for a square matrix of size 512*512
&lt;a href=&quot;sum_square_1.png&quot; data-lightbox=&quot;sum_1&quot; data-title=&quot;Sum of elements (512x512)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/sum_square_1.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/GXUG06sZDLCrGsOogF5wmd2DOFU&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results for a rectangular matrix of size 1024*256
&lt;a href=&quot;sum_rectangle_1.png&quot; data-lightbox=&quot;sum_1&quot; data-title=&quot;Sum of elements (1024x256)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/sum_rectangle_1.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/ekNZpPxwiw4wYtqOV51vPF8CXUo&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see the difference is not much. I can live with that for most of the programs. However, transpose yields a complete different story.&lt;/p&gt;
&lt;h2 id=&quot;transpose-of-all-elements&quot;&gt;Transpose of all elements&lt;/h2&gt;
&lt;p&gt;Let us also take an example of transposing a matrix. Which will have completely different access pattern then sum. Here are our two popular approaches:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Vector style code for a square matrix&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Similar thing can be achieved in C by int**&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; Matrix = &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Vector_transpose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Matrix&amp;amp; matrix1, Matrix&amp;amp; matrix2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)
            matrix[i][j] = matrix[j][i];
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// C style code for a square matrix&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C_style_transpose&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* matrix1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;* matrix2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; N; j++)
            matrix2[i * N + j] = matrix1[j * N + i];
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sum;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Results for a square matrix of size 512*512
&lt;a href=&quot;transpose_square_1.png&quot; data-lightbox=&quot;transpose_1&quot; data-title=&quot;Transpose of elements (512x512)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/transpose_square_1.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/0DVlD6PAcBQvMmfnjLlJpcSHcls&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results for a rectangular matrix of size 1024*256
&lt;a href=&quot;transpose_rectangle_1.png&quot; data-lightbox=&quot;transpose_1&quot; data-title=&quot;Transpose of elements (1024x256)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/transpose_rectangle_1.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/IyZq2RwP_RtZJpC4B8iwTSTSRwI&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;matrix-class&quot;&gt;Matrix Class&lt;/h1&gt;

&lt;p&gt;We can write a custom template class that will allow us to access elements like vector. To achieve we need to overload the brackets operator.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// e.g. a matrix of 5 rows and 3 cols&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// matrix&amp;lt;int, 5, 3&amp;gt; x;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// can be accessed like x[row][col]&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;typename&lt;/span&gt; T, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; R, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; C&amp;gt;
&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;matrix&lt;/span&gt; {&lt;/span&gt;
    T* data; &lt;span class=&quot;comment&quot;&gt;// can be changed to unique_ptr in C++1z&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:
    matrix() : data(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; T[R*C]) {}

    ~matrix(){ &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt; [] data; }

    &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; T* &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;[](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row) {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;data[row * C];
    }

    &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T* &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;[](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; row) &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;amp;data[row * C];
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Almost all the compilers today can optimize away the referencing and dereferencing of the same array. The assembly code generated by it is virtually same as the C style version.&lt;/p&gt;
&lt;p&gt;So, how well it performs.&lt;/p&gt;
&lt;h2 id=&quot;sum-of-all-elements&quot;&gt;Sum of all elements&lt;/h2&gt;
&lt;p&gt;Results for a square matrix of size 512*512
&lt;a href=&quot;sum_square_2.png&quot; data-lightbox=&quot;sum_2&quot; data-title=&quot;Sum of elements (512x512)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/sum_square_2.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/UODm6ylUQGqDCGbdxMIUvpqHrcA&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results for a rectangular matrix of size 1024*256
&lt;a href=&quot;sum_rectangle_2.png&quot; data-lightbox=&quot;sum_2&quot; data-title=&quot;Sum of elements (1024x256)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/sum_rectangle_2.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/-rGgWT2v0CZsUNbOtoTOCs9ybiE&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Separate code can be found &lt;a href=&quot;sum.cpp&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;transpose-of-all-elements&quot;&gt;Transpose of all elements&lt;/h2&gt;
&lt;p&gt;Results for a square matrix of size 512*512
&lt;a href=&quot;transpose_square_2.png&quot; data-lightbox=&quot;transpose_2&quot; data-title=&quot;Transpose of elements (512x512)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/transpose_square_2.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/VxtU_lR77Fjtm-vo9Vs8CmMDQl4&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Results for a rectangular matrix of size 1024*256
&lt;a href=&quot;transpose_rectangle_2.png&quot; data-lightbox=&quot;transpose_2&quot; data-title=&quot;Transpose of elements (1024x256)&quot;&gt;
&lt;img src=&quot;/articles/representing-matrix-in-cpp/transpose_rectangle_2.png&quot; alt=&quot;sum benchmark&quot;&gt;&lt;/a&gt;
See this benchmark on &lt;a href=&quot;http://quick-bench.com/PXQl8uW3Dk1R_pBelXFlFCMRxEY&quot; target=&quot;_blank&quot;&gt;quick-bench&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Separate code can be found &lt;a href=&quot;transpose.cpp&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Falling animation in HTML5 using javascript</title>
      <link>http://localhost:8080/articles/falling-matrix/</link>
      <pubDate>Mon, 24 Mar 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/falling-matrix/</guid>
      <author></author>
      <description>&lt;p&gt;Prerequisites: basic knowledge of javascript and computer graphics.
&lt;br/&gt;
Technologies:
&lt;a href=&quot;https://en.wikipedia.org/wiki/HTML5&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-html5&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;https://jsfiddle.net/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-jsfiddle&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.javascript.com/&quot; target=&quot;_blank&quot;&gt;js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is how the end result will looks like:
&lt;img src=&quot;/articles/falling-matrix/matrix.png&quot; alt=&quot;matrix&quot;&gt;
Live demo with code: &lt;a href=&quot;https://jsfiddle.net/welcometors/tz38d5vg/1/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-lg fa-jsfiddle&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First we need to create an HTML5 canvas. A HTML5 canvas is used to draw graphics. Almost all of the flash graphics are pretty much replaced by canvas today.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;background&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;512&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;360&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will be served as an output screen for our animation.&lt;/p&gt;
&lt;p&gt;Now, we can access the canvas in javascript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'background'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; context = canvas.getContext(&lt;span class=&quot;string&quot;&gt;'2d'&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Canvas&lt;/strong&gt; object contains the properties related to output window like width, height etc.
&lt;strong&gt;Context&lt;/strong&gt; object will be used to call in-built functions for drawing, writing etc.&lt;/p&gt;
&lt;p&gt;Let us assume that our text string is “test”, which is falling vertically in our output screen.
Also, we need multiple instances of it.&lt;br&gt;Let us assume that the coordinates of the top left corner of a text instance is &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.
See below:
&lt;img src=&quot;/articles/falling-matrix/screen.svg&quot; alt=&quot;screen&quot;&gt;&lt;/p&gt;
&lt;p&gt;I encapsulated one of them in a dotted box to showcase the top right coner of a single instance.
Since, we don’t have infinite memory for our infinitely falling matrix text instances. So we need to reuse them.
A clever trick is to change the coordinate back to the top when they cross the bottom of the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/falling-matrix/screenTransition.svg&quot; alt=&quot;screenTransition&quot;&gt;&lt;/p&gt;
&lt;p&gt;This way, we only need few instances to make our screen look full. 
To avoid them form keep falling in the same column we can re-randomize &lt;em&gt;x&lt;/em&gt; while changing &lt;em&gt;y&lt;/em&gt; to top.  &lt;/p&gt;
&lt;p&gt;If you have worked with any graphics library in the past then you will be familiar with the coordinate system of canvas. 
Top left corner will be &lt;em&gt;(0,0)&lt;/em&gt; and &lt;em&gt;x&lt;/em&gt; will increase as you go right and &lt;em&gt;y&lt;/em&gt; will increase as you go down. 
We’ll be moving our text in range &lt;em&gt;(x,-screenHeight)&lt;/em&gt; to &lt;em&gt;(x,+screenHeight)&lt;/em&gt; for some randomized &lt;em&gt;x&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For moving text we are creating a class (called Bit) to manage them as an individual objects.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bit&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// x and y positions are initialized randomly&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * canvas.width;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * canvas.height - canvas.height;

    &lt;span class=&quot;comment&quot;&gt;// this draw the text for current frame&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.draw = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;comment&quot;&gt;// Formatting the text to display&lt;/span&gt;
        context.fillStyle = &lt;span class=&quot;string&quot;&gt;'green'&lt;/span&gt;;
        context.font = &lt;span class=&quot;string&quot;&gt;'14pt Calibri'&lt;/span&gt;;

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; textWidth = context.measureText(&lt;span class=&quot;string&quot;&gt;&quot;W.&quot;&lt;/span&gt;).width;

        &lt;span class=&quot;comment&quot;&gt;// we need to draw the characters of the text&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;// one by one from top to bottom&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;text.length; i++){
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; charaterWidth = context.measureText(text[i]).width;
            context.fillText( text[i], 
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos - charaterWidth/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, 
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos + i*textWidth);
        }
    };

    &lt;span class=&quot;comment&quot;&gt;// this will update the text for next frame&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos &amp;gt; canvas.height){
            &lt;span class=&quot;comment&quot;&gt;// if text crosses the bottom of the screen then reset &lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos = -canvas.height;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * canvas.width;
        }
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// drop text by 2 pixels down&lt;/span&gt;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For testing, we’ll create some of the &lt;strong&gt;Bit&lt;/strong&gt; objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bits = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;; ++i)
    bits.push(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bit());&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we need a function to redraw at every frame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reDraw&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// before drawing clear entire screen&lt;/span&gt;
    context.fillStyle = &lt;span class=&quot;string&quot;&gt;'black'&lt;/span&gt;;
    context.fillRect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, canvas.width, canvas.height);

    &lt;span class=&quot;comment&quot;&gt;// draw every text elements&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bit &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; bits){
        bits[bit].draw();
        bits[bit].tick();
    }
}

&lt;span class=&quot;comment&quot;&gt;// This will call 'reDraw' at every 33 milliseconds. &lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// So, our animation will run at 30fps (1000/33 ≈ 30).&lt;/span&gt;
setInterval(reDraw, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, our code will run like this:
&lt;img src=&quot;/articles/falling-matrix/matrix_test.png&quot; alt=&quot;matrix_test&quot;&gt;
Live demo with code: &lt;a href=&quot;https://jsfiddle.net/welcometors/tz38d5vg/0/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-lg fa-jsfiddle&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure you understood above code completely before moving ahead.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now, we need to add depth (i.e. some text are near and some are far) in our falling matrix. 
This can be achieved by changing the text size, falling speed and brightness according to the depth.&lt;/p&gt;
&lt;p&gt;We need different colors and bunch of randomized symbols:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = [&lt;span class=&quot;string&quot;&gt;'#008800'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#00FF00'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#55FF55'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#BBFFBB'&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; words = [
    &lt;span class=&quot;string&quot;&gt;&quot;昨天&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;小时&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;钟表&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;漂亮&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;常见&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;說這&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;안녕하&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;그래서&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;안녕하&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;십니까&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;洗手在&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;笑好玩儿&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;么希奇的&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;환영합니다&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;好吃的食物&quot;&lt;/span&gt;];&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to change our &lt;strong&gt;Bit&lt;/strong&gt; class for depth (distance).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bit&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;distance&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// size and speed are inversely proportional to distance&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.speed = &lt;span class=&quot;number&quot;&gt;160&lt;/span&gt; / distance;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fontSize = &lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.speed, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)));

    &lt;span class=&quot;comment&quot;&gt;// font and color will be decided accordingly&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.font = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fontSize.toString() +&lt;span class=&quot;string&quot;&gt;'pt Calibri'&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = colors[(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.fontSize&lt;span class=&quot;number&quot;&gt;-8&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];

    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * canvas.width;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * canvas.height - canvas.height;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * words.length);

    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.draw = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        context.fillStyle = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color;
        context.font = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.font;

        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = words[&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text];
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; textWidth = context.measureText(&lt;span class=&quot;string&quot;&gt;&quot;W.&quot;&lt;/span&gt;).width;

        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;text.length; i++){
            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; charaterWidth = context.measureText(text[i]).width;
            context.fillText( text[i], 
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos - charaterWidth/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, 
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos + i*textWidth);
        }
    };

    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.tick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos &amp;gt; canvas.height){
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos = - canvas.height;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.xpos = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * canvas.width;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * words.length);
        }
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.ypos += &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.speed;

        &lt;span class=&quot;comment&quot;&gt;// we will give 2% change to change the text&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chance = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random();
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( chance &amp;lt; &lt;span class=&quot;number&quot;&gt;.01&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// change to next word&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % words.length;
        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( chance &amp;lt; &lt;span class=&quot;number&quot;&gt;.02&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// change to previous word&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + words.length) % words.length;
    };
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the motion blur effect we just need to change one line in the &lt;em&gt;redraw()&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    context.fillStyle = &lt;span class=&quot;string&quot;&gt;'rgba(0,0,0,0.4)'&lt;/span&gt;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of putting an opaque black rectangle, we can put a transparent one. 
As a result, previous frame will slowly fade away, frame by frame, instead of disappearing at once. 
And on screen, it’ll look like text is leaving a trail behind. Which will serve as our fake motion blur.&lt;/p&gt;
&lt;p&gt;We can also change the canvas size programmatically to adapt to the window size.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;context.canvas.width  = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth;
context.canvas.height = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Final results:
&lt;img src=&quot;/articles/falling-matrix/matrix.png&quot; alt=&quot;matrix&quot;&gt;
Live demo with code: &lt;a href=&quot;https://jsfiddle.net/welcometors/tz38d5vg/1/&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;fa fa-lg fa-jsfiddle&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Shadow</title>
      <link>http://localhost:8080/articles/the-shadow/</link>
      <pubDate>Mon, 10 Feb 2014 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/the-shadow/</guid>
      <author></author>
      <description>&lt;p&gt;This article contains my story of getting into art and drawings. Also contains most of my pencil drawings.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;
Jump to &lt;a href=&quot;#drawings&quot;&gt;drawings&lt;/a&gt;&lt;/p&gt;
&lt;script
  src=&quot;https://code.jquery.com/jquery-2.2.4.min.js&quot;
  integrity=&quot;sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=&quot;
  crossorigin=&quot;anonymous&quot;&gt;
&lt;/script&gt;
&lt;link href=&quot;/css/lightbox.min.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;script src=&quot;/scripts/lightbox.min.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Since my school-days, I always lean towards math and science. But art also kept me fascinated. I grew up with 90’s cartoons like Duck-Tales, The Mask, Dexter’s Lab etc. While watching those shows, I always wondered, how they are able to make those cartoons look evil or funny. Also, one of my uncle is an artist. Whenever he visit our home, I requested him to draw celebrities faces (usually Bollywood actor/actress). His drawings looked real. And he does that with whatever basic pencil/colors I had. Sometimes, I don’t even have the full set colors. Most of the time colors was missing from the set. At that time, I understood that you don’t need expensive stuff to make a good piece of art. &lt;/p&gt;
&lt;p&gt;In my school, I was good at drawing but not in the top bracket. So, I never took it seriously. My grandfather was a civil engineer. At that time all the home designs are hand draws so calligraphy course was a must for a civil engineer. Fast forward to 8&lt;sup&gt;th&lt;/sup&gt; grade. I got a calligraphy book from him. I don’t remember the name as the cover got torn and missing. But, it was an amalgam of different types of styles old English, italics etc. It was like some sort of cheat sheet for calligraphy. He also gifted me Speedball calligraphy nibs and pen. I got into my new profound hobby. Book also had lessons on improving handwriting by giving exercises to develop muscle memory. Before this, I was slightly above average in terms of handwriting, but after one year I’m one of the best in my class (of 60). Every class has a class chart with the name of every student along with their roll number. At that time class chart was supposed to be made by student with best handwriting in the class. Head teachers of the class often boast about marks and handwriting of their class. Next year, I was getting requests from multiple teaches for their class chart. That gave me an unofficial acknowledgement that I was now one of best in entire grade (9 classes of same size).&lt;/p&gt;
&lt;p&gt;I choose science stream after high-school as I cannot be separated from computer and maths. And all the hobbies are taken by large P.C.M. syllabus, programming and PC gaming. Fast forward to college, I started again by scratching random things on my notebook while attending boring classes. My college days are not so hectic, so I started sketching again after ages.  &lt;/p&gt;
&lt;h2 id=&quot;drawings&quot;&gt;&lt;b&gt;The Shadow &lt;/b&gt; (my drawing book)&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;-all are done on plain A4 sheet&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My college cafeteria (College of engineering Roorkee)
&lt;a href=&quot;img/page02.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;My college cafeteria (College of engineering Roorkee)&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page02.jpg&quot; alt=&quot;page02&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Corvette
&lt;a href=&quot;img/page03.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Corvette&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page03.jpg&quot; alt=&quot;page03&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Iron-man
&lt;a href=&quot;img/page04.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Iron-man&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page04.jpg&quot; alt=&quot;page04&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rihanna
&lt;a href=&quot;img/page05.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Rihanna&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page05.jpg&quot; alt=&quot;page05&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lord Krishna
&lt;a href=&quot;img/page06.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Lord Krishna&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page06.jpg&quot; alt=&quot;page06&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Aishwarya Rai
&lt;a href=&quot;img/page07.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Aishwarya Rai&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page07.jpg&quot; alt=&quot;page07&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Man tearing paper
&lt;a href=&quot;img/page08.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Man tearing paper&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page08.jpg&quot; alt=&quot;page08&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Devin Star Tailes
&lt;a href=&quot;img/page10.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Devin Star Tailes&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page10.jpg&quot; alt=&quot;page10&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anne Hathaway
&lt;a href=&quot;img/page11.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Anne Hathaway&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page11.jpg&quot; alt=&quot;page11&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anime girl
&lt;a href=&quot;img/page12.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Anime girl&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page12.jpg&quot; alt=&quot;page12&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scarlett Johansson
&lt;a href=&quot;img/page13.jpg&quot; data-lightbox=&quot;the-shadow&quot; data-title=&quot;Scarlett Johansson&quot;&gt;
&lt;img src=&quot;/articles/the-shadow/img/page13.jpg&quot; alt=&quot;page13&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bonus (childhood prayer)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/the-shadow/img/page01.jpg&quot; alt=&quot;page01&quot;&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>GATE 2011 Solution</title>
      <link>http://localhost:8080/articles/gate-2011-solution/</link>
      <pubDate>Sun, 01 May 2011 15:00:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/gate-2011-solution/</guid>
      <author></author>
      <description>&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
    tex2jax: {inlineMath: [['$','$']]},
    displayAlign: &quot;left&quot;,
});
MathJax.Hub.Config({
  TeX: {
    Macros: {
      RR: &quot;{\\bf R}&quot;,
      bold: [&quot;{\\bf #1}&quot;,1],
      Abs: ['\\left\\lvert #2 \\right\\rvert_{\\text{#1}}', 2, &quot;&quot;]
    }
  }
});
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; async
  src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;p&gt;This is my attempt to answer the questions appeared in GATE 2011 Computer Science paper. 
I’ve cleared the paper with 35&lt;sup&gt;th&lt;/sup&gt; rank.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;What I’ve seen from the 2011 and past papers is that, almost all of the questions were from the standard books. 
I studied all subjects from the standard books while doing B.Tech. courses.
And, for practice, I’ve used past papers from 2003-10. 
That’s all I’ve done for my GATE preparation. 
I haven’t joined any coaching or online test series for GATE.&lt;/p&gt;
&lt;p&gt;Mathematics questions were mostly new and fresh. Also, you can never escape maths in computer science.
So, you should have strong mathematical base (especially Probability), if not then start with that.&lt;/p&gt;
&lt;p&gt;If you have enough time along with preparation then spend your time on programming. 
&lt;a href=&quot;https://www.hackerrank.com&quot; target=&quot;_blank&quot;&gt;Hackerrank&lt;/a&gt; is a very good site for that. 
You can challenge your programming skills along with mathematical skills on 
&lt;a href=&quot;https://projecteuler.net&quot; target=&quot;_blank&quot;&gt;Projecteuler&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;List of some standard books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discrete mathematics: Kenneth H Rosen&lt;/li&gt;
&lt;li&gt;Digital Logic: Morris Mano&lt;/li&gt;
&lt;li&gt;Data Structure: Ellis Horowitz or Kruse (Kruse is easier with better examples)&lt;/li&gt;
&lt;li&gt;Algorithms: Coreman (you don’t need anything else)&lt;/li&gt;
&lt;li&gt;Automata/TOC: Ullman (you don’t need anything else)&lt;/li&gt;
&lt;li&gt;Compiler: Ullman&lt;/li&gt;
&lt;li&gt;Computer Networks: Frouzan (some topics are cleaner in Tanenbaum)&lt;/li&gt;
&lt;li&gt;Operating Systems: Galvin&lt;/li&gt;
&lt;li&gt;Database: Korth (Navathe for B and B+ Trees)&lt;/li&gt;
&lt;li&gt;Computer Organization/Architecture: Hamacher + Morris Mano (both have their strengths and weakness)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;index&quot;&gt;&lt;b&gt;Questions: Index &lt;/b&gt; (Set-C ordering)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#q1-25&quot;&gt;Q.1 - Q.25 (1 mark questions)&lt;/a&gt;&lt;table&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q1&quot;&gt;Q1&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q2&quot;&gt;Q2&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q3&quot;&gt;Q3&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q4&quot;&gt;Q4&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q5&quot;&gt;Q5&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q6&quot;&gt;Q6&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q7&quot;&gt;Q7&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q8&quot;&gt;Q8&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q9&quot;&gt;Q9&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q10&quot;&gt;Q10&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q11&quot;&gt;Q11&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q12&quot;&gt;Q12&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q13&quot;&gt;Q13&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q14&quot;&gt;Q14&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q15&quot;&gt;Q15&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q16&quot;&gt;Q16&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q17&quot;&gt;Q17&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q18&quot;&gt;Q18&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q19&quot;&gt;Q19&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q20&quot;&gt;Q20&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q21&quot;&gt;Q21&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q22&quot;&gt;Q22&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q23&quot;&gt;Q23&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q24&quot;&gt;Q24&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q25&quot;&gt;Q25&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#q26-55&quot;&gt;Q.26 - Q.55 (2 marks questions)&lt;/a&gt;&lt;table&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q26&quot;&gt;Q26&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q27&quot;&gt;Q27&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q28&quot;&gt;Q28&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q29&quot;&gt;Q29&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q30&quot;&gt;Q30&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q31&quot;&gt;Q31&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q32&quot;&gt;Q32&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q33&quot;&gt;Q33&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q34&quot;&gt;Q34&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q35&quot;&gt;Q35&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q36&quot;&gt;Q36&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q37&quot;&gt;Q37&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q38&quot;&gt;Q38&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q39&quot;&gt;Q39&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q40&quot;&gt;Q40&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q41&quot;&gt;Q41&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q42&quot;&gt;Q42&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q43&quot;&gt;Q43&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q44&quot;&gt;Q44&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q45&quot;&gt;Q45&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q46&quot;&gt;Q46&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q47&quot;&gt;Q47&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q48&quot;&gt;Q48&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q49&quot;&gt;Q49&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q50&quot;&gt;Q50&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q51&quot;&gt;Q51&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q52&quot;&gt;Q52&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q53&quot;&gt;Q53&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q54&quot;&gt;Q54&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q55&quot;&gt;Q55&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;!--&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;#q&quot;&gt;Q&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q&quot;&gt;Q&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q&quot;&gt;Q&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q&quot;&gt;Q&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;#q&quot;&gt;Q&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;--&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:8080/&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q1-25&quot;&gt;&lt;b&gt;Q.1 - Q.25 (1 mark questions)&lt;/b&gt;&lt;/h2&gt;

&lt;hr&gt;
&lt;h3 id=&quot;q1&quot;&gt;&lt;b&gt;Question 1&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider a relational table with a single record for each registered student with the following attributes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Registration_Num: Unique registration number of each registered student&lt;/li&gt;
&lt;li&gt;UID: Unique identity number, unique at the national level for each citizen&lt;/li&gt;
&lt;li&gt;BankAccount_Num: Unique account number at the bank. A student can have multiple accounts or join accounts. This attribute stores the primary account number.&lt;/li&gt;
&lt;li&gt;Name: Name of the student&lt;/li&gt;
&lt;li&gt;Hostel_Room: Room number of the hostel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which one of the following option is &lt;strong&gt;INCORRECT&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;BankAccount_Num is candidate key&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Registration_Num can be a primary key&lt;/li&gt;
  &lt;li&gt;UID is candidate key if all students are from the same country&lt;/li&gt;
  &lt;li&gt;If S is a superkey such that $S \cap \mathit{UID} = \emptyset$ then $S \cup \mathit{UID}$ is also a superkey&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“X is the candidate key of a relation R only if X→Y where Y is all subsets of R”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Navathe (Fundamentals of DBMS)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But it neither satisfies BankAccount_Num→UID nor BankAccount_Num→Registration_Num&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q2&quot;&gt;&lt;b&gt;Question 2&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A computer handles several interrupt sources of which the following are relevant for this question.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interrupt from CPU temperature sensor (raises interrupt if CPU temperature is too high)&lt;/li&gt;
&lt;li&gt;Interrupt from Mouse (raises interrupt if mouse is moved or button is pressed)&lt;/li&gt;
&lt;li&gt;Interrupt from Keyboard (raises interrupt when a key is pressed or released)&lt;/li&gt;
&lt;li&gt;Interrupt from Hard Disk (raises interrupt when a disk read is completed)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which one of these will be handled at &lt;strong&gt;HIGHEST&lt;/strong&gt; priority?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Interrupt from Hard Disk&lt;/li&gt;
  &lt;li&gt;Interrupt from Mouse&lt;/li&gt;
  &lt;li&gt;Interrupt from Keyboard&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Interrupt from CPU temperature sensor&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Higher priority interrupt levels are assigned to requests which, if delayed or interrupted, could have serious consequences. Devices with high speed transfer such as magnetic disks are given high priority, and slow devices such as keyboard receive low priority.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Morris Mano (Computer System Architecture)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We know that mouse pointer movements are more frequent than keyboard ticks. So its obvious that its data transfer rate is higher than keyboard.
Delaying a CPU temperature sensor could have serious consequences, overheat can damage CPU circuitry.
From the above information we can conclude that priorities are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CPU temperature sensor &amp;gt; Hard Disk &amp;gt; Mouse &amp;gt; Keyboard&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q3&quot;&gt;&lt;b&gt;Question 3&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Which of the following is &lt;strong&gt;NOT&lt;/strong&gt; desired in a good Software Requirement Specifications (SRS) document?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Functional Requirements&lt;/li&gt;
  &lt;li&gt;Non-Functional Requirements&lt;/li&gt;
  &lt;li&gt;Goals of Implementation&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Algorithms for Software Implementation&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“An SRS document should clearly document the following aspects of a system: Functional Requirements, Non-Functional Requirements and Goals of implementation.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Rajib Mall (Fundamentals of Software Engineering)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q4&quot;&gt;&lt;b&gt;Question 4&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;HTML (HyperText Markup Language) has language elements which permit certain actions other than describing the structure of the web document. Which one of the following actions is &lt;strong&gt;NOT&lt;/strong&gt; supported by pure HTML (without any server or client side scripting) pages?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Embed web objects from different sites into the same page&lt;/li&gt;
  &lt;li&gt;Refresh the page automatically after a specified interval&lt;/li&gt;
  &lt;li&gt;Automatic redirect to another page upon download&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Display the client time as the part of the page&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;OBJECT&amp;gt; … tag is used to embed object&lt;/li&gt;
&lt;li&gt;&amp;lt;META HTTP-EQUIV = &amp;quot;Refresh&amp;quot; CONTENT = &amp;quot;5&amp;quot;&amp;gt; is used to refresh page after every 5 seconds&lt;/li&gt;
&lt;li&gt;&amp;lt;META HTTP-EQUIV = &amp;quot;Refresh&amp;quot; CONTENT = &amp;quot;0&amp;quot; URL = &amp;quot;another-page.html&amp;quot;&amp;gt; is used to redirect&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q5&quot;&gt;&lt;b&gt;Question 5&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Which of the following pairs have &lt;strong&gt;DIFFERENT&lt;/strong&gt; expressive power?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Deterministic Finite Automata (DFA) and Non-Deterministic Finite Automata (NFA)&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Deterministic push down automata (DPDA) and Non-Deterministic push down automata (NPDA)&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Deterministic single-tape Turing machine and Non-Deterministic single-tape Turing machine&lt;/li&gt;
  &lt;li&gt;Single-tape Turing machine and Multi-tape Turing machine&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“A language L is accepted by some DFA if and only if L is accepted by some NFA.”&lt;/p&gt;
&lt;p&gt;“If M&lt;sub&gt;N&lt;/sub&gt; is a nondeterministic turing machine, then there is a deterministic turing machine M&lt;sub&gt;D&lt;/sub&gt; suchthat L(M&lt;sub&gt;N&lt;/sub&gt;) = L(M&lt;sub&gt;D&lt;/sub&gt;)”&lt;/p&gt;
&lt;p&gt;“Every language is accepted by multitape turing machine is recursively enumerable.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Ullman (Automata theory, languages and computations)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q6&quot;&gt;&lt;b&gt;Question 6&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A company needs to develop digital signal processing software for one of its newest inventions. The software is expected to have 40000 lines of code. The company needs to determine the effort in person-months needed to develop this software using the basic COCOMO model. The multiplicative factor for this model is given as 2.8 for this software development on embedded systems, while the exponentiation factor is given as 1.20. What is the estimation effort in person-months?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;234.25&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;932.50&lt;/li&gt;
  &lt;li&gt;287.80&lt;/li&gt;
  &lt;li&gt;122.40&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot; $\mathit{Effort} = a_1 . \text{KLOC}^{a_2}$ &amp;quot;&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Rajib Mall (Fundamentals of Software Engineering)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$ \mathit{KLOC} = \mathit{LOC}/1000 = 40000/1000 = 40 $$
$$ \mathit{Effort} = 2.8 \times {40}^{1.2} = 234.2 $$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q7&quot;&gt;&lt;b&gt;Question 7&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Let the time taken to switch between user and kernel modes of execution be t1 while the time taken to switch between two processes be t2. Which of the following is &lt;strong&gt;TRUE&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;t1 &gt; t2&lt;/li&gt;
  &lt;li&gt;t1 = t2&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;t1 &lt; t2&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;nothing can be said about the relationship between t1 and t2&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Whenever a trap or interrupt occurs, the hardware switches from user mode to monitor mode (this is, changes the state of the mode bit to 0). Thus whenever the operating system gains control of the computer, it is in monitor mode. The system always switches to user mode (by setting the mode bit to 1) before passing the control to a user program.”&lt;/p&gt;
&lt;p&gt;“When a context switch occurs, the kernel saves the context of old process in its PCB and loads the saved context of the new process scheduled to run.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Galvin (Operating System Concepts)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As mode switching is a part of context switching, it’s definitely less than context switch time. Alternatively, whenever context switch occurs between two user processes then there are two mode changes first from user to monitor and after that monitor to user.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q8&quot;&gt;&lt;b&gt;Question 8&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A company needs to develop a strategy for software product development for which it has a choice of two programming languages L1 and L2. The number of lines of code (LOC) developed using L2 is estimated to be twice the LOC developed with L1. The product will have to be maintained for five years. Various parameters for the company are given in the table below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Parameter&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Language L1&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Language L2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Man years needed for development&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;LOC/10,000&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;LOC/10,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Development cost per man year&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;₹ 10,00,000&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;₹ 7,50,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Maintenance time&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5 years&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5 years&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Cost of maintenance per year&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;₹ 1,00,000&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;₹ 50,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Total cost of the project includes the cost of development and maintenance. What is the LOC for L1 for which the total cost of the project using L1 is equal to the cost of project using L2?&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;4000&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;5000&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;4333&lt;/li&gt;
  &lt;li&gt;4667&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Let LOC of $L1 = x$, so LOC of $L2 = 2x$
$$Cost(L1) = \frac{x}{10000} \times 1000000 + 5 \times 100000 $$
$$Cost(L2) = \frac{2x}{10000} \times 750000 + 5 \times 50000 $$
$$ 100 x + 500000 = 150 x + 250000 $$
Hence, $ 𝓍 = 5000 $&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q9&quot;&gt;&lt;b&gt;Question 9&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider the following activities related to email.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m1: Send an email from mailbox server to a mail client&lt;/li&gt;
&lt;li&gt;m2: Download an email from mailbox server to a mail client&lt;/li&gt;
&lt;li&gt;m3: Checking email in a web browser&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which application level protocol used in each activity?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;   m1:HTTP &amp;nbsp;&amp;nbsp; m2:SMTP &amp;nbsp;&amp;nbsp; m3:POP&lt;/li&gt;
  &lt;li&gt;   m1:SMTP &amp;nbsp;&amp;nbsp; m2:FTP  &amp;nbsp;&amp;nbsp; m3:HTTP&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;m1:SMTP &amp;nbsp;&amp;nbsp; m2:POP  &amp;nbsp;&amp;nbsp; m3:HTTP&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;   m1:POP  &amp;nbsp;&amp;nbsp; m2:SMTP &amp;nbsp;&amp;nbsp; m3:IMAP&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“SMTP is a push protocol; it pushes the message from the client to server”&lt;/p&gt;
&lt;p&gt;“POP and IMAP supports pull protocol they can pull the message from the server”&lt;/p&gt;
&lt;p&gt;“Web-Based mail: Mail transfer from Alice’s browser to her mail server is done through HTTP. The message from the receiving server (the Web server) to Bob’s browser is done through HTTP.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Forouzan (Data Communications and Networking)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s now clear that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m1:SMTP       m2:POP or IMAP      m3:HTTP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q10&quot;&gt;&lt;b&gt;Question 10&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;If two fair coins are flipped and at least one of the outcomes is known to be head, what is the probability that both outcomes are heads?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;1/3&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;1/4&lt;/li&gt;
  &lt;li&gt;1/2&lt;/li&gt;
  &lt;li&gt;2/3&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Let A = at least one outcome is head and B = both outcomes are head&lt;br&gt;So $P(A) = 3/4$,  $P(B) = 1/4$, and $P(A \cap B) = 1/4$&lt;br&gt;As $P(A) \times P(B) = 3/16 \ne P(A \cap B)$, they are not independent events&lt;br&gt;Hence, $P(B/A) = P(A \cap B)/P(A) = 1/3$&lt;/p&gt;
&lt;p&gt;Alternatively,&lt;br&gt;Sample Space = {HT, TH, HH}&lt;br&gt;Event = {HH}&lt;br&gt;From axiomatic definition of probability&lt;br&gt;$P(Event) = |Event|/|SampleSpace| = 1/3$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q11&quot;&gt;&lt;b&gt;Question 11&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A layer-4 firewall (a device that can look at all protocol headers up to the transport layer) &lt;strong&gt;CANNOT&lt;/strong&gt; &lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;block entire HTTP traffic during 9:00PM and 5:00AM&lt;/li&gt;
  &lt;li&gt;block all ICMP traffic&lt;/li&gt;
  &lt;li&gt;stop incoming traffic from a specific IP address but allow outgoing traffic to the same IP address&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;block TCP traffic from a specific user on a multi-user system during 9:00PM and 5:00AM&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“A packet-filter firewall cannot distinguish between different packets arriving at TCP port 80 (HTTP). Testing must be done at the application level (using URLs).”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Forouzan (Data Communications and Networking)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Entire HTTP traffic can be blocked by blocking TCP port 80 which is under the capabilities of L4 firewall. However, as L4 level firewall cannot access Application layer, it cannot block packets based on user identity.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q12&quot;&gt;&lt;b&gt;Question 12&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;In a compiler, keywords of a language are recognized during&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;parsing of the program&lt;/li&gt;
  &lt;li&gt;the code generation&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;the lexical analysis of the program&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;dataflow analysis&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Lexical analysis includes recognition of keywords and identifiers.&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Ullman (Compilers principles, techniques, &amp;amp; tools)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q13&quot;&gt;&lt;b&gt;Question 13&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;An algorithm to find the length of the longest monotonically increasing sequence starting at index $i$ in the array.&lt;br&gt;Initialize $ L_n-1 = 1 $&lt;br&gt;$ \forall i $ such that $ 0 \leq i \leq n-2 $&lt;br&gt;$$
L_i = 
    \begin{cases} 
        1 + L_i+1, &amp;amp;\ \mbox{if } A[i] &amp;lt; A[i+1] \\
        1, &amp;amp;\ \mbox{otherwise} 
    \end{cases} 
$$&lt;/p&gt;
&lt;p&gt;Finally the length of the longest monotonically increasing sequence is $Max(L0, L1, …, Ln-1)$.  &lt;/p&gt;
&lt;p&gt;Which of the following statement is &lt;strong&gt;TRUE&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;The algorithm uses dynamic programming paradigm&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;The algorithm has a linear complexity and uses branch and bound paradigm&lt;/li&gt;
  &lt;li&gt;The algorithm has a non-linear polynomial complexity and uses branch and bound paradigm&lt;/li&gt;
  &lt;li&gt;The algorithm uses divide and conquer paradigm.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;It can be shown that algorithm has a linear complexity. As the array can be calculated from right to left in a single go. However it doesnot uses branch and bound paradigm. The branch and bound paradigm generally used to solve NP-hard problems. As it remove the recursions by solving each sub-problems only once it reflects the dynamic programming paradigm.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q14&quot;&gt;&lt;b&gt;Question 14&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Let $P$ be a regular language and $Q$ be a context-free language such that $Q \subseteq P$. (For example, let $P$ be the language represented by the regular expression $p^\ast q^\ast$ and $Q$ be ${ p^n q^n | n \in N}$). Then which of the following is &lt;strong&gt;ALWAYS&lt;/strong&gt; regular?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;$P \cap Q$&lt;/li&gt;
  &lt;li&gt;$P - Q$&lt;/li&gt;
  &lt;li&gt;$\mathbf{\Sigma^\ast - P}$&lt;/li&gt;
  &lt;li&gt;$\Sigma^\ast - Q$&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“If $L$ is a regular language over alphabet $\Sigma$, then complement of $L = \Sigma^\ast - L$ is also a regular language.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Ullman (Automata theory, languages and computations)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q15&quot;&gt;&lt;b&gt;Question 15&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A max-heap is a heap where the value of each parent is greater than or equal to the value of its children. Which of the following is a max-heap?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q15.svg&quot; alt=&quot;Q15&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“$n$-element heap has height $\lfloor lg(n) \rfloor$.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Cormen (Introduction to Algorithms)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While, C and D has correct height, they doesn’t satisfy max-heap property.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q16&quot;&gt;&lt;b&gt;Question 16&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;What does the following fragment of C program print?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c[] = &lt;span class=&quot;string&quot;&gt;&quot;GATE2011&quot;&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *p = c;
&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;, p + p[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] - p[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/code&gt;&lt;/pre&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;GATE2011&lt;/li&gt;
  &lt;li&gt;E2011&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;2011&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;011&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;p[3] = ‘E’ = 69 (ASCII of E) and p[1] = ‘A’ = 65 (ASCII of A)&lt;br&gt;and p[3] - p[1] = 69 - 65 = 4&lt;br&gt;p is address of the first element of array and p+4 is the address of fifth element which is ‘2’.&lt;br&gt;So, printf will start from ‘2’ and print till the end (until null character is found).&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q17&quot;&gt;&lt;b&gt;Question 17&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider a hypothetical processor with an instruction of type &lt;strong&gt;LW R1, 20(R2)&lt;/strong&gt;, which during execution reads a 32-bit word from memory and stores it in a 32-bit register R1. The effective address of the memory location is obtained by the addition of a constant 20 and the contents of register R2. Which of the following best reflects the addressing mode implemented by this instruction for operand in memory?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Immediate Addressing&lt;/li&gt;
  &lt;li&gt;Register Addressing&lt;/li&gt;
  &lt;li&gt;Register Indirect Scaled Addressing&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Base Indexed Addressing&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q18&quot;&gt;&lt;b&gt;Question 18&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Let the page fault service time be 10ms in a computer with average memory access time being 20ns. If one page fault is generated for every 10&lt;sup&gt;6&lt;/sup&gt; memory accesses, what is the effective access time for the memory?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;21ns&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;30ns&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;23ns&lt;/li&gt;
  &lt;li&gt;35ns&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;$\begin{multline}\text{effective access time} = \\ (1-p) \times \text{memory access time} \\ + p \times \text{page-fault service time}\end{multline}$&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Galvin (Operating System Concepts)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;p = 1/10&lt;sup&gt;6&lt;/sup&gt; = 0.000001
memory access time = 20ns
page-fault service time = 10ms = 10000000ns
so effective access time = .999999×20ns + .000001×10000000ns 
                         = 29.99998ns ≈ 30ns
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q19&quot;&gt;&lt;b&gt;Question 19&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;The lexical analysis for a modern computer language such as Java needs the power of which one of the following machine models in a necessary and sufficient sense?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;Finite state automata&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Deterministic pushdown automata&lt;/li&gt;
  &lt;li&gt;Non-Deterministic pushdown automata&lt;/li&gt;
  &lt;li&gt;Turing Machine&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;TODO:&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q20&quot;&gt;&lt;b&gt;Question 20&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;If the difference between expectation of the square of a random variable (E[X²]) and the square of the expectation of the random variable (E[X])² is denoted by R, then?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;R = 0&lt;/li&gt;
  &lt;li&gt;R &amp;lt; 0&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;R &amp;ge; 0&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;R &amp;gt; 0&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Variance of a random variable X, V[X] = (E[X²]) - (E[X])²”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Cormen (Introduction to Algorithms)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Variance can never be less than zero. However, it can be zero.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q21&quot;&gt;&lt;b&gt;Question 21&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;K4 and Q3 are graphs with the following structures (in order).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q21.svg&quot; alt=&quot;Q21&quot;&gt;&lt;/p&gt;
&lt;p&gt;Which one of the following statements is &lt;strong&gt;TRUE&lt;/strong&gt; in relation to these graphs?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;K4 is planar while Q3 is not&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Both K4 and Q3 are planar&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Q3 is planar while K4 is not&lt;/li&gt;
  &lt;li&gt;Neither K4 nor Q3 are planar&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Both can be rearranged with no intersecting edges
&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011A21.svg&quot; alt=&quot;A21&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q22&quot;&gt;&lt;b&gt;Question 22&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A thread is usually defined as a “light weight process” because an operating system (OS) maintains smaller data structures for a thread than for a process. In relation to this, which of the following is &lt;strong&gt;TRUE&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;On per-thread basis, the OS maintains only CPU register state&lt;/li&gt;
  &lt;li&gt;The OS does not maintain a separate stack for each thread&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;On per-thread basis, the OS does not maintain virtual memory state&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;On per-thread basis, the OS maintains only scheduling and accounting information&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Os maintains separate stack, register and thread-specific data for different threads.&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Galvin (Operating System Concepts)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q23&quot;&gt;&lt;b&gt;Question 23&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;The minimum number of D flip-flops needed to design a mod-258 counter is&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;9&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;8&lt;/li&gt;
  &lt;li&gt;512&lt;/li&gt;
  &lt;li&gt;258&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“An $n$-bit binary counter consists of $n$ flip-flops and can count in binary from $0$ to $2^n - 1$.”&lt;/p&gt;
&lt;p&gt;– &lt;cite&gt;Morris Mano (Digital logic and computer design)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So to count from $0$ to $n$ we needs at least $\lceil lg(n) \rceil$ flip-flops and $\lceil lg(257) \rceil = 9$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q24&quot;&gt;&lt;b&gt;Question 24&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;The simplified SOP (Sum Of Product) form of the boolean expression $(P+\bar{Q}+\bar{R}).(P+\bar{Q}+R).(P+Q+\bar{R})$ is&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;$(\bar{P}.Q + \bar{R})$&lt;/li&gt;
  &lt;li&gt;$\mathbf{(P + \bar{Q}.\bar{R})}$&lt;/li&gt;
  &lt;li&gt;$(\bar{P}.Q + R)$&lt;/li&gt;
  &lt;li&gt;$(P.Q + R)$&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;$$ (P+\bar{Q}+\bar{R}).(P+\bar{Q}+R).(P+Q+\bar{R}) $$
$$ = \prod_{}(3,2,1) = \sum_{}(0,4,5,6,7) $$
Solving using &lt;strong&gt;K-map&lt;/strong&gt; answer is $(P + \bar{Q}.\bar{R})$
&lt;img src=&quot;img/gate2011A24.svg&quot; alt=&quot;A24&quot; style=&quot;width: 400px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q25&quot;&gt;&lt;b&gt;Question 25&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Which one of the following circuit is &lt;strong&gt;NOT&lt;/strong&gt; equivalent to a 2-input XNOR (exclusive NOR) gate?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q25.png&quot; alt=&quot;Q25&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011A25.png&quot; alt=&quot;A25&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;q26-55&quot;&gt;&lt;b&gt;Q.26 - Q.55 (2 marks questions)&lt;/b&gt;&lt;/h2&gt;

&lt;hr&gt;
&lt;h3 id=&quot;q26&quot;&gt;&lt;b&gt;Question 26&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider evaluating the following expression tree on a machine with load-store architecture in which memory can be accessed only through load and store instructions. The variables a,b,c,d and e initially stored in memory. The binary operators used in this expression tree can be evaluate by the machine only when the operands are in registers. The instructions produce results only in a register. If no intermediate results can be stored in memory, what is the minimum number of registers needed to evaluate this expression?&lt;/p&gt;
&lt;img src=&quot;img/gate2011Q26.png&quot; alt=&quot;Q26&quot; style=&quot;width: 250px;&quot;/&gt;

&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;9&lt;/li&gt;
  &lt;li&gt;5&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;3&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;R1←c, R2←d, R2←R1+R2, R1←e, R2←R1-R2&lt;br&gt;Now to calculate the rest of the expression we must load a and b into the registers but we need the content of R2 later. So we must use another Register.&lt;br&gt;R1←a, R3←b, R1←R1-R3, R1←R1+R2&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q27&quot;&gt;&lt;b&gt;Question 27&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider the following table of arrival time and burst time for three processes P0, P1 and P2.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Process&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Arrival Time&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Burst Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;P0&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;0 ms&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;9 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;P1&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1 ms&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;4 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;P2&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2 ms&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;9 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;The pre-emptive shortest job first scheduling algorithm is used. Scheduling is carried out only at arrival or completion of processes. What is the average waiting time for the three processes?&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;5.0 ms&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;4.33 ms&lt;/li&gt;
  &lt;li&gt;6.33 ms&lt;/li&gt;
  &lt;li&gt;7.33 ms&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011A27.png&quot; alt=&quot;A27&quot;&gt;
GANTT CHART
    &amp;gt; Waiting time of P0 = 5 - 1 = 4
    &amp;gt; Waiting time of P1 = 1 - 1 = 0
    &amp;gt; Waiting time of P2 = 13 - 2 = 11
    &amp;gt; Average waiting time = (4+0+11)/3 = 5&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q28&quot;&gt;&lt;b&gt;Question 28&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A deck of 5 cards (each carrying a distinct number from 1 to 5) is shuffled thoroughly. Two cards are then removed one at time from the deck. What is the probability that the two cards are selected with the number on the first card being one higher than the number on the second card?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;1/5&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;4/25&lt;/li&gt;
  &lt;li&gt;1/4&lt;/li&gt;
  &lt;li&gt;2/5&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;You have to select 2 cards from 5. So, there are $ {}^5 P_2 = 5! / 3! $ = 20 elementary events.
From which there are 4 favorable number of cases:&lt;br&gt;5 before 4, 4 before 3, 3 before 2 and 2 before 1.&lt;br&gt;Hence, probability = 4/20 = 1/5&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q29&quot;&gt;&lt;b&gt;Question 29&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider a finite sequence of random values $X = \{ x_1, x_2, \ldots, x_n \}$. Let $μ_x$ be the mean and $σ_x$ be the standard deviation of $X$. Let another finite sequence $Y$ of equal length be derived from this as $y_i = a x_i + b$, where $a$ and $b$ are positive constants. Let $μ_y$ be the mean and $σ_y$ be the standard deviation of this sequence. Which one of the following statements is &lt;strong&gt;INCORRECT&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Index position of mode of X in X is the same as the index position of mode of Y in Y.&lt;/li&gt;
  &lt;li&gt;Index position of median of X in X is the same as the index position of median of Y in Y.&lt;/li&gt;
  &lt;li&gt;$μ_y = aμ_x+b$&lt;/li&gt;
  &lt;li&gt;$\mathbf{σ_y = aσ_x+b}$&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Adding a constant like b shift the distribution while multiplying to a constant like a stretch the distribution along median
&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011A29.png&quot; alt=&quot;A29&quot;&gt;
Mode is the most frequent data of the distribution, so the index position of the mode will not change.
From the above graph it is clear that index position of the median will also not change.&lt;/p&gt;
&lt;p&gt;Now for the mean:
$$Y_i = aX_i + b$$
$$\Rightarrow \Sigma Y_i = \Sigma (aX_i + b)$$
$$\Rightarrow \Sigma Y_i = a ( \Sigma X_i ) + nb$$
$$\Rightarrow \frac{\Sigma Y_i}{n} = \frac{a ( \Sigma X_i )}{n} + b$$
$$\Rightarrow μ_y = aμ_x+b$$&lt;/p&gt;
&lt;p&gt;And for the standard deviation
$$σ_y = \sqrt{\frac{\Sigma (μ_y - Y_i)^2}{n}}$$
$$\Rightarrow σ_y = \sqrt{\frac{\Sigma (a μ_x + b - a X_i - b)^2}{n}}$$
$$\Rightarrow σ_y = a \sqrt{\frac{\Sigma (μ_x - X_i)^2}{n}}$$
$$\Rightarrow σ_y = a σ_x$$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q30&quot;&gt;&lt;b&gt;Question 30&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider a database table T containing two columns X and Y each of type integer. After the creation of the table, one record (X=1, Y=1) is inserted in the table.&lt;/p&gt;
&lt;p&gt;Let MX and My denote the respective maximum values of X and Y among all records in the table at any point in time. Using MX and MY, new record is inserted in the table 128 times with X and Y values being MX+1, 2.MY+1 respectively. It may be noted that each time after the insertion, values of MX and MY change.&lt;/p&gt;
&lt;p&gt;What will be the output of the following SQL query after the steps mentioned above are carried out?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT Y FROM T WHERE X=7;&lt;/code&gt;&lt;/pre&gt;&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;127&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;255&lt;/li&gt;
  &lt;li&gt;129&lt;/li&gt;
  &lt;li&gt;257&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;$X$ increases as $X_i = X_{i-1} + 1$ and $X_1 = 1$ so $X_i = i$.&lt;br&gt;And, $Y$ increases as $Y_i = 2 Y_{i-1} + 1$ and $Y_1 = 1$
$$Y_i = 2 Y_{i-1} + 1$$
$$Y_i = 2 (2 Y_{i-2} + 1) + 1 = 2^2 Y_{i-2} + 2^1 + 2^0$$
$$Y_i = 2^{i-1} Y_1 + 2^{i-2} + \ldots + 2^1 + 2^0$$
$$Y_i = 2^i - 1$$
So, at $X_7 = 7$, value is $Y_7 = 2^7 - 1 = 127$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q31&quot;&gt;&lt;b&gt;Question 31&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Given $i = \sqrt{-1}$, what will be the evaluation of the integral 
$$\int_0^{\pi / 2} \frac{\cos x + i \sin x}{\cos x - i \sin x} dx$$&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;2&lt;/li&gt;
  &lt;li&gt;$-i$&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;$i$&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;$$\int_0^{\pi / 2} \frac{\cos x + i \sin x}{\cos x - i \sin x} dx$$
$$ = \int_0^{\pi / 2} \frac{e^{i x}}{e^{-i x}} dx$$
$$ = \int_0^{\pi / 2} e^{2 i x} dx$$
$$ = \frac{1}{2i} \big[ e^{2 i x} \big]_0^{\pi / 2}$$
$$ = \frac{1}{2i} \big[ e^{i \pi} - e^0 \big]$$
$$ = \frac{1}{2i} \big[ \cos \pi + i \sin \pi - 1 \big]$$
$$ = \frac{1}{2i} \big[ -1 + 0 - 1 \big]$$
$$ = \frac{1}{2i} \times -2 \times \frac{i}{i}$$
$$ = i$$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q32&quot;&gt;&lt;b&gt;Question 32&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Which one of the following options is &lt;strong&gt;CORRECT&lt;/strong&gt; given three positive integers x, y and z, and a predicate
$$P(x) = ¬(x=1) ∧ ∀y(∃z(x=y.z) ⇒ (y=x) ∨ (y=1))$$&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;P(x) being true means that x is a prime number&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;P(x) being true means that x is a number other than 1&lt;/li&gt;
  &lt;li&gt;P(x) is always true irrespective of the value of x&lt;/li&gt;
  &lt;li&gt;P(x) being true means that x has exactly two factors other than 1 and x&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Precedence of Logical Operators&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Operator&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Precedence&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$¬$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$\wedge$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$\vee$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$\rightarrow$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$\leftrightarrow$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;– &lt;cite&gt;Kenneth H Rosen (Discrete Mathematics &amp;amp; Its Applications)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the predicate is evaluated as
$$ P(x) = (¬(x=1)) ∧ (∀y(∃z(x=y.z) ⇒ ((y=x) ∨ (y=1)))) $$
$P(x)$ being true means $x \ne 1$ and&lt;br&gt;For all $y$ if there exists a $z$ such that $x = y.z$ then $y$ must be $x$ (i.e. $z = 1$) or $y$ must be 1 (i.e. $z = x$)&lt;br&gt;It means that $x$ have only two factors: first is $1$ and second is $x$ itself.&lt;br&gt;This predicate defines the prime number.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q33&quot;&gt;&lt;b&gt;Question 33&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;We are given a set of $n$ distinct elements and an unlabeled binary tree with $n$ nodes. In how many ways can we populate the tree with the given set so that it becomes a binary search tree?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;0&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;1&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;$n!$&lt;/li&gt;
  &lt;li&gt;$\frac{1}{n+1} {}^{2n}C_n$&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Since the binary tree is already given that means we can only fill the labels. For a Binary Search Tree property to be satisfied we need to insert elements in sorted order for inorder sequence.&lt;/p&gt;
&lt;p&gt;As all the elements are distinct, there is only one sorted permutation.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q34&quot;&gt;&lt;b&gt;Question 34&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;On a non-pipelined sequential processor, a program segment, which is a part of the interrupt service routine, is given to transfer 5000 bytes from an I/O device to memory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      Initialize the address register
      Initialize the count to 500
LOOP: Load a byte from device
      Store in memory at address given by address register
      Increment the address register
      Decrement the count
      If count != 0 go to LOOP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assume that each statement in this program is equivalent to machine instruction which takes one clock cycle to execute if it is a non-load/store instruction. The load-store instructions take two clock cycles to execute.&lt;/p&gt;
&lt;p&gt;The designer of the system also has an alternate approach of using DMA controller to implement the same transfer. The DMA controller requires 20 clock cycles for initialization and other overheads. Each DMA transfer cycle takes two clock cycles to transfer one byte of data from the device to the memory.&lt;/p&gt;
&lt;p&gt;What is the approximate speedup when the DMA controller based design is used in place of the interrupt driven program based input-output?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;3.4&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;4.4&lt;/li&gt;
  &lt;li&gt;5.1&lt;/li&gt;
  &lt;li&gt;6.7&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;      STATEMENT                                           CLOCK CYCLE(S) NEEDED
      Initialize the address register                                        1
      Initialize the count to 500                                            1
LOOP: Load a byte from device                                                2
      Store in memory at address given by address register                   2
      Increment the address register                                         1
      Decrement the count                                                    1
      If count != 0 go to LOOP                                               1&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Interrrupt driven transfer time = 1+1+500×(2+2+1+1+1) = 3502
DMA based transfer time = 20+500×2 = 1020
Speedup = 3502/1020 ≈ 3.4&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q35&quot;&gt;&lt;b&gt;Question 35&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider the languages L1, L2 and L3 as given below.
$$L1 = \{ 0^p 1^q , | , p,q ∈ N \},$$
$$L2 = \{ 0^p 1^q , | , p,q ∈ N , \textrm{and} , p=q \} \text{and}$$
$$L3 = \{ 0^p 1^q 0^r , | , p,q,r ∈ N , \textrm{and} , p=q=r \}.$$
Which of the following statements is &lt;strong&gt;NOT TRUE&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Push Down Automata (PDA) can be used to recognize L1 and L2&lt;/li&gt;
  &lt;li&gt;L1 is a regular language&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;All three languages are context free&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Turing machines can be used to recognize all the languages&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;L1 is regular. Its DFA is given as
&lt;img src=&quot;img/gate2011A35a.png&quot; alt=&quot;A35a&quot; style=&quot;width: 200px;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;L2 is not regular, can be proved using pumping lemma (refer to Ullman). But L2 is CFL.
$$ S → AB $$
$$ A → 0A|ε $$
$$ B → 1B|ε $$&lt;/p&gt;
&lt;p&gt;L3 is not CFL, can be proved using pumping lemma (refer to Ullman). But L3 is Recursive.&lt;/p&gt;
&lt;img src=&quot;img/gate2011A35b.png&quot; alt=&quot;A35b&quot; style=&quot;width: 400px;&quot;/&gt;
Every regular language is also a CFL. So PDA can be used to recognized L1 and L2.  
As a CFL and Regular language is also a Recursive language. Hence, turing machine can be used to recognize L1, L2 and L3.

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q36&quot;&gt;&lt;b&gt;Question 36&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider two binary operators ‘↑’ and ‘↓’ with the precedence of operator ↓ being lower than that of the operator ↑. Operator ↑ is right associative while operator ↓ is left associative. Which one of the following represents the parse tree for expression (7↓3↑4↑3↓2)?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q36.svg&quot; alt=&quot;Q36&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;the expression (7↓3↑4↑3↓2) is evaluated as ((7↓(3↑(4↑3)))↓2)&lt;br&gt;the corresponding tree to expression is B&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q37&quot;&gt;&lt;b&gt;Question 37&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Database table by name Loan_Records is given below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Borrower&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Bank_Manager&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Load_Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;What is the output of the following SQL query?&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(*)
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt;(
   (&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; Borrower,Bank_Manager &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; Loan_Recordx) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; S
   &lt;span class=&quot;keyword&quot;&gt;NATURAL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt;
   (&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; Bank_Manager,Loan_Amount &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; Loan_Records) &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; T
);&lt;/code&gt;&lt;/pre&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;3&lt;/li&gt;
  &lt;li&gt;9&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;5&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;6&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;Table &lt;strong&gt;S&lt;/strong&gt; is&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Borrower&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Bank_Manager&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Sundarajan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Ramgopal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;Sundarajan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Table &lt;strong&gt;T&lt;/strong&gt; is&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Bank_Manager&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Load_Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Now join is evaluated as&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;$$ Π_{Borrower,Bank\_Manager,Loan\_Amount}(σ_{S.Bank\_Manager=T.Bank\_Manager}(S \times T)) $$&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Table $ \mathbf{S \times T} $ is&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Borrower&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;S.Bank_Manager&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;T.Bank_Manager&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Load_Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Final rows after Project operator has been applied&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;Borrower&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Bank_Manager&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Load_Amount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Ramesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Suresh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Ramgopal&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;5000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;10000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Mahesh&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;Sundarajan&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;7000.00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;* * *&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;q38&quot;&gt;&lt;b&gt;Question 38&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;The following is the comment written for a C function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*  This function computes the roots of a quadratic equation
    a.x^2 + b.x + c = 0. The function stores two real roots
    in *root1 and *root2 and returns the status of validity
    of roots. It handles four different kinds of cases.
    (i) When coefficient a is zero irrespective of discriminant
    (ii) When discriminant is positive
    (iii) When discriminant is zero
    (iv) When discriminant is negative.
    Only in case (ii) and (iii) the stored roots are valid.
    Otherwise 0 is stored in roots. The function returns
    0 when the roots are valid and -1 otherwise.
    The function also ensures root1 &amp;gt;= root2
    int get_QuadRoots( float a, float b, float c,
        float *root1, float *root2);
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A software test engineer is assigned the job of doing black box testing. He comes up with the following test cases, many of which are redundant.&lt;/p&gt;
&lt;img src=&quot;img/gate2011Q38.png&quot; alt=&quot;Q38&quot; style=&quot;width: 25em;&quot;/&gt;

&lt;p&gt;Which one of the following option provide the set of non-redundant tests using equivalence class partitioning approach from input perspective for black box testing?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;T1, T2, T3, T6&lt;/li&gt;
  &lt;li&gt;T1, T3, T4, T5&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;T2, T4, T5, T6&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;T2, T3, T4, T5&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011A38.png&quot; alt=&quot;A38&quot;&gt;&lt;/p&gt;
&lt;p&gt;T2, T4, T5 and T6 belong to different classes. Hence it gives an optimal test suite.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q39&quot;&gt;&lt;b&gt;Question 39&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;A deterministic finite automation (DFA) D with alphabet $∑ = \{ a, b \}$ is given below.
&lt;img src=&quot;img/gate2011Q39a.png&quot; alt=&quot;Q39a&quot; style=&quot;width: 12em;&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Which of the following finite state machines is a valid minimal DFA which accepts the same language as D?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q39b.png&quot; alt=&quot;Q39b&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;(B) accepts &amp;#39;b&amp;#39; which is not accepted by D
(C) is not a DFA as q has two edges going for b
(D) accepts &amp;#39;bba&amp;#39; which is not accepted by D&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q40&quot;&gt;&lt;b&gt;Question 40&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;An application loads 100 libraries at startup. Loading each library requires exactly one disk access.
The seek time of the disk to a random locaion is given as 10 ms. Rotational speed of disk is 6000 rpm.
If all 100 libraries are loaded from random locations on the disk, how long does it take to load all
libraries? (The time to transfer data from the disk block once the head has been positioned at the
start of the block may be neglected.)&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;0.50 s&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;1.50 s&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;1.25 s&lt;/li&gt;
  &lt;li&gt;1.00 s&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Rotational speed = 6000rpm
Average Latency = (60/rpm)/2 = 5 ms
Average access time = Average latency + Average seek time 
                    = 5 ms + 10 ms = 15 ms
As there the copy time is neglected time to load 1 library is 15 ms
Time to load 100 libraries = 100 × 15 ms = 1.5 s&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q41&quot;&gt;&lt;b&gt;Question 41&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;An 8KB direct-mapped write-back cache is organized as multiple blocks, each of size 32-bytes. The processor
generates 32-bit addresses. The cache controller maintains the tag information for each cache block
comprising of the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Valid bit&lt;/li&gt;
&lt;li&gt;1 Modified bit&lt;/li&gt;
&lt;li&gt;As many bits as the minimum needed to identify the memory block mapped in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is the total size of memory needed at the cache controller to store meta-data (tags) for the cache?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;4864 bits&lt;/li&gt;
  &lt;li&gt;6144 bits&lt;/li&gt;
  &lt;li&gt;6656 bits&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;5376 bits&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Cache size = 8 KB
Block size = 32 bytes
Number of cache lines 
    = Cache size / Block size 
    = (8 × 1024 bytes)/32 = 256&lt;/code&gt;&lt;/pre&gt;&lt;img src=&quot;img/gate2011A41.png&quot; alt=&quot;A41&quot; style=&quot;width: 15em;&quot;/&gt;

&lt;pre&gt;&lt;code&gt;total bits required to store meta-data of 1 line 
    = 1 + 1 + 19 = 21 bits
total memory required = 21 × 256 = 5376 bits&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q42&quot;&gt;&lt;b&gt;Question 42&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Definition of a language L with alphabet {a} is given as following.
$$ L = \{ a^{nk} \, | \, k &amp;gt; 0, \, \textrm{and} \, n \, \textrm{is a positive integer constant} \} $$&lt;/p&gt;
&lt;p&gt;What is the minimum number of states needed in DFA to recognize L?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;k+1&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;n+1&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;$2^{n+1}$&lt;/li&gt;
  &lt;li&gt;$2^{k+1}$&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;This language is same is $(aaa \ldots n \, \textrm{times})^{+}$&lt;br&gt;The DFA of the language is given as&lt;/p&gt;
&lt;img src=&quot;img/gate2011A42.png&quot; alt=&quot;A42&quot; style=&quot;width: 25em;&quot;/&gt;

&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q43&quot;&gt;&lt;b&gt;Question 43&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider an instruction pipeline with four stages (S1, S2, S3 and S4) each with combinational circuit only.
The pipeline registers are required between each stage and at the end of the last stage. 
Delays for the stages and for the pipeline registers are as given in the figure&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/gate-2011-solution/img/gate2011Q43.svg&quot; alt=&quot;Q43&quot;&gt;&lt;/p&gt;
&lt;p&gt;What is the approximate speed up of the pipeline in steady state under ideal conditions when 
compared to the corresponding non-pipeline implementation?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;4.0&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;2.5&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;1.1&lt;/li&gt;
  &lt;li&gt;3.0&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;In a non pipeline implementation, we wont be needing the pipeline registers. 
So, the total execution time will be: 
$$ S1 + S2 + S3 + S4 $$
$$ = 5 + 6 + 11 + 8 = 30ns $$&lt;/p&gt;
&lt;p&gt;Just like a chain is as strong as it’s weakest link. 
A pipeline implementation is as fast as it’s slowest unit. 
Execution time in a steady state will be:
$$ Max(S1, S2, S3, S4) + 1 $$
$$ = Max(5, 6, 11, 8) + 1 = 12ns $$
$$ \textrm{Speed-up} = 30/12 = 2.5 $$&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q44&quot;&gt;&lt;b&gt;Question 44&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider the matrix as given below.&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
1 &amp;amp; 2 &amp;amp; 3 \&lt;br&gt;0 &amp;amp; 4 &amp;amp; 7 \&lt;br&gt;0 &amp;amp; 0 &amp;amp; 3 \&lt;br&gt;\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Which one of the following options provides the &lt;strong&gt;CORRECT&lt;/strong&gt; values of the eigenvalues of the matrix?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;&lt;b&gt;1, 4, 3&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;3, 7, 3&lt;/li&gt;
  &lt;li&gt;7, 3, 2&lt;/li&gt;
  &lt;li&gt;1, 2, 3&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;The eigen values of a triangular matrix are its diagonal entries. 
You can also cross-check it by using $|M - λI| = 0$.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;q45&quot;&gt;&lt;b&gt;Question 45&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;Consider a relational table $r$ with sufficient number of records, having attributes $A_1, A_2, \ldots, A_n$
and let $1 ≤ p ≤ n$. Two queries $Q1$ and $Q2$ are given below. &lt;/p&gt;
&lt;p&gt;$$ Q1 = \pi{}_{A_1, A_2, \ldots, A_p} (\sigma_{A_p = c} (r))  $$
where $c$ is a constant
$$ Q2 = \pi{}_{A_1, A_2, \ldots, A_p} (\sigma_{ c_1 \le A_p \le c_2} (r))  $$
where $c1$ and $c2$ are constants&lt;/p&gt;
&lt;p&gt;The database can be configured to do ordered indexing on $A_p$ or hashing on $A_p$. 
Which of the following statements is &lt;strong&gt;TRUE&lt;/strong&gt;?&lt;/p&gt;
&lt;ol type=&quot;A&quot;&gt;
  &lt;li&gt;Ordered indexing will always outperform hashing for both queries&lt;/li&gt;
  &lt;li&gt;Hashing will always outperform ordered indexing for both queries&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Hashing outperform ordered indexing on Q1, but not on Q2&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Hashing will outperform ordered indexing on Q2, but not on Q1&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;explanation-&quot;&gt;Explanation:&lt;/h2&gt;
&lt;p&gt;If record are accessed for a particular value from table, hashing will do better. 
If records are accessed in a range of values, ordered indexing will perform better.&lt;/p&gt;
&lt;p&gt;&lt;i class=&quot;fa fa-angle-double-up&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;#index&quot;&gt;Index&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Rest will be uploaded later.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Markdown syntax</title>
      <link>http://localhost:8080/articles/markdown-syntax/</link>
      <pubDate>Tue, 02 Feb 2010 05:30:00 +0630</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/markdown-syntax/</guid>
      <author></author>
      <description>&lt;p&gt;Full markdown syntax taken from John Gruber’s &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Daring Fireball&lt;/a&gt;.
Did you know that 9 out of 10 bloggers prefer to write in markdown?&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;markdown-syntax&quot;&gt;Markdown: Syntax&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;Inline HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block&quot;&gt;Block Elements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;Paragraphs and Line Breaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#header&quot;&gt;Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;Blockquotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;Horizontal Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#span&quot;&gt;Span Elements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;Emphasis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;Miscellaneous&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;Backslash Escapes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;Automatic Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This document is itself written using Markdown; you
can &lt;a href=&quot;http://localhost:8080/projects/markdown/syntax.text&quot;&gt;see the source for it by adding ‘.text’ to the URL&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;

&lt;p&gt;Markdown is intended to be as easy-to-read and easy-to-write as is feasible.&lt;/p&gt;
&lt;p&gt;Readability, however, is emphasized above all else. A Markdown-formatted
document should be publishable as-is, as plain text, without looking
like it’s been marked up with tags or formatting instructions. While
Markdown’s syntax has been influenced by several existing text-to-HTML
filters – including [Setext] &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;1&lt;/a&gt;, [atx] &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;2&lt;/a&gt;, [Textile] &lt;a href=&quot;http://textism.com/tools/textile/&quot;&gt;3&lt;/a&gt;, [reStructuredText] &lt;a href=&quot;http://docutils.sourceforge.net/rst.html&quot;&gt;4&lt;/a&gt;,
[Grutatext] &lt;a href=&quot;http://www.triptico.com/software/grutatxt.html&quot;&gt;5&lt;/a&gt;, and [EtText] &lt;a href=&quot;http://ettext.taint.org/doc/&quot;&gt;6&lt;/a&gt; – the single biggest source of
inspiration for Markdown’s syntax is the format of plain text email.&lt;/p&gt;
&lt;p&gt;To this end, Markdown’s syntax is comprised entirely of punctuation
characters, which punctuation characters have been carefully chosen so
as to look like what they mean. E.g., asterisks around a word actually
look like *emphasis*. Markdown lists look like, well, lists. Even
blockquotes look like quoted passages of text, assuming you’ve ever
used email.&lt;/p&gt;
&lt;h3 id=&quot;html&quot;&gt;Inline HTML&lt;/h3&gt;

&lt;p&gt;Markdown’s syntax is intended for one purpose: to be used as a
format for &lt;em&gt;writing&lt;/em&gt; for the web.&lt;/p&gt;
&lt;p&gt;Markdown is not a replacement for HTML, or even close to it. Its
syntax is very small, corresponding only to a very small subset of
HTML tags. The idea is &lt;em&gt;not&lt;/em&gt; to create a syntax that makes it easier
to insert HTML tags. In my opinion, HTML tags are already easy to
insert. The idea for Markdown is to make it easy to read, write, and
edit prose. HTML is a &lt;em&gt;publishing&lt;/em&gt; format; Markdown is a &lt;em&gt;writing&lt;/em&gt;
format. Thus, Markdown’s formatting syntax only addresses issues that
can be conveyed in plain text.&lt;/p&gt;
&lt;p&gt;For any markup that is not covered by Markdown’s syntax, you simply
use HTML itself. There’s no need to preface it or delimit it to
indicate that you’re switching from Markdown to HTML; you just use
the tags.&lt;/p&gt;
&lt;p&gt;The only restrictions are that block-level HTML elements – e.g. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;,
&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, etc. – must be separated from surrounding
content by blank lines, and the start and end tags of the block should
not be indented with tabs or spaces. Markdown is smart enough not
to add extra (unwanted) &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags around HTML block-level tags.&lt;/p&gt;
&lt;p&gt;For example, to add an HTML table to a Markdown article:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is a regular paragraph.

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;Foo&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

This is another regular paragraph.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that Markdown formatting syntax is not processed within block-level
HTML tags. E.g., you can’t use Markdown-style &lt;code&gt;*emphasis*&lt;/code&gt; inside an
HTML block.&lt;/p&gt;
&lt;p&gt;Span-level HTML tags – e.g. &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; – can be
used anywhere in a Markdown paragraph, list item, or header. If you
want, you can even use HTML tags instead of Markdown formatting; e.g. if
you’d prefer to use HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags instead of Markdown’s
link or image syntax, go right ahead.&lt;/p&gt;
&lt;p&gt;Unlike block-level HTML tags, Markdown syntax &lt;em&gt;is&lt;/em&gt; processed within
span-level tags.&lt;/p&gt;
&lt;h3 id=&quot;autoescape&quot;&gt;Automatic Escaping for Special Characters&lt;/h3&gt;

&lt;p&gt;In HTML, there are two characters that demand special treatment: &lt;code&gt;&amp;lt;&lt;/code&gt;
and &lt;code&gt;&amp;amp;&lt;/code&gt;. Left angle brackets are used to start tags; ampersands are
used to denote HTML entities. If you want to use them as literal
characters, you must escape them as entities, e.g. &lt;code&gt;&amp;amp;lt;&lt;/code&gt;, and
&lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ampersands in particular are bedeviling for web writers. If you want to
write about ‘AT&amp;amp;T’, you need to write ‘&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;‘. You even need to
escape ampersands within URLs. Thus, if you want to link to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;q=larry+bird&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you need to encode the URL as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://images.google.com/images?num=30&amp;amp;amp;q=larry+bird&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in your anchor tag &lt;code&gt;href&lt;/code&gt; attribute. Needless to say, this is easy to
forget, and is probably the single most common source of HTML validation
errors in otherwise well-marked-up web sites.&lt;/p&gt;
&lt;p&gt;Markdown allows you to use these characters naturally, taking care of
all the necessary escaping for you. If you use an ampersand as part of
an HTML entity, it remains unchanged; otherwise it will be translated
into &lt;code&gt;&amp;amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, if you want to include a copyright symbol in your article, you can write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp;copy;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and Markdown will leave it alone. But if you write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AT&amp;amp;T&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will translate it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AT&amp;amp;amp;T&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Similarly, because Markdown supports &lt;a href=&quot;#html&quot;&gt;inline HTML&lt;/a&gt;, if you use
angle brackets as delimiters for HTML tags, Markdown will treat them as
such. But if you write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 &amp;lt; 5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will translate it to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4 &amp;amp;lt; 5&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, inside Markdown code spans and blocks, angle brackets and
ampersands are &lt;em&gt;always&lt;/em&gt; encoded automatically. This makes it easy to use
Markdown to write about HTML code. (As opposed to raw HTML, which is a
terrible format for writing about HTML syntax, because every single &lt;code&gt;&amp;lt;&lt;/code&gt;
and &lt;code&gt;&amp;amp;&lt;/code&gt; in your example code needs to be escaped.)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;block&quot;&gt;Block Elements&lt;/h2&gt;


&lt;h3 id=&quot;p&quot;&gt;Paragraphs and Line Breaks&lt;/h3&gt;

&lt;p&gt;A paragraph is simply one or more consecutive lines of text, separated
by one or more blank lines. (A blank line is any line that looks like a
blank line – a line containing nothing but spaces or tabs is considered
blank.) Normal paragraphs should not be indented with spaces or tabs.&lt;/p&gt;
&lt;p&gt;The implication of the “one or more consecutive lines of text” rule is
that Markdown supports “hard-wrapped” text paragraphs. This differs
significantly from most other text-to-HTML formatters (including Movable
Type’s “Convert Line Breaks” option) which translate every line break
character in a paragraph into a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;When you &lt;em&gt;do&lt;/em&gt; want to insert a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; break tag using Markdown, you
end a line with two or more spaces, then type return.&lt;/p&gt;
&lt;p&gt;Yes, this takes a tad more effort to create a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;, but a simplistic
“every line break is a &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;“ rule wouldn’t work for Markdown.
Markdown’s email-style &lt;a href=&quot;#blockquote&quot;&gt;blockquoting&lt;/a&gt; and multi-paragraph &lt;a href=&quot;#list&quot;&gt;list items&lt;/a&gt;
work best – and look better – when you format them with hard breaks.&lt;/p&gt;
&lt;h3 id=&quot;header&quot;&gt;Headers&lt;/h3&gt;

&lt;p&gt;Markdown supports two styles of headers, [Setext] &lt;a href=&quot;http://docutils.sourceforge.net/mirror/setext.html&quot;&gt;1&lt;/a&gt; and [atx] &lt;a href=&quot;http://www.aaronsw.com/2002/atx/&quot;&gt;2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Setext-style headers are “underlined” using equal signs (for first-level
headers) and dashes (for second-level headers). For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is an H1
=============

This is an H2
-------------&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Any number of underlining &lt;code&gt;=&lt;/code&gt;‘s or &lt;code&gt;-&lt;/code&gt;‘s will work.&lt;/p&gt;
&lt;p&gt;Atx-style headers use 1-6 hash characters at the start of the line,
corresponding to header levels 1-6. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is an H1

## This is an H2

###### This is an H6&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Optionally, you may “close” atx-style headers. This is purely
cosmetic – you can use this if you think it looks better. The
closing hashes don’t even need to match the number of hashes
used to open the header. (The number of opening hashes
determines the header level.) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# This is an H1 #

## This is an H2 ##

### This is an H3 ######&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;blockquote&quot;&gt;Blockquotes&lt;/h3&gt;

&lt;p&gt;Markdown uses email-style &lt;code&gt;&amp;gt;&lt;/code&gt; characters for blockquoting. If you’re
familiar with quoting passages of text in an email message, then you
know how to create a blockquote in Markdown. It looks best if you hard
wrap the text and put a &lt;code&gt;&amp;gt;&lt;/code&gt; before every line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&amp;gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&amp;gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&amp;gt;
&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&amp;gt; id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown allows you to be lazy and only put the &lt;code&gt;&amp;gt;&lt;/code&gt; before the first
line of a hard-wrapped paragraph:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&amp;gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by
adding additional levels of &lt;code&gt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; This is the first level of quoting.
&amp;gt;
&amp;gt; &amp;gt; This is nested blockquote.
&amp;gt;
&amp;gt; Back to the first level.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Blockquotes can contain other Markdown elements, including headers, lists,
and code blocks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;this-is-a-header-&quot;&gt;This is a header.&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;This is the first list item.&lt;/li&gt;
&lt;li&gt;This is the second list item.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s some example code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Any decent text editor should make email-style quoting easy. For
example, with BBEdit, you can make a selection and choose Increase
Quote Level from the Text menu.&lt;/p&gt;
&lt;h3 id=&quot;list&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Markdown supports ordered (numbered) and unordered (bulleted) lists.&lt;/p&gt;
&lt;p&gt;Unordered lists use asterisks, pluses, and hyphens – interchangably
– as list markers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Red
*   Green
*   Blue&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;is equivalent to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+   Red
+   Green
+   Blue&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-   Red
-   Green
-   Blue&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ordered lists use numbers followed by periods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  Bird
2.  McHale
3.  Parish&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s important to note that the actual numbers you use to mark the
list have no effect on the HTML output Markdown produces. The HTML
Markdown produces from the above list is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;McHale&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Parish&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you instead wrote the list in Markdown like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  Bird
1.  McHale
1.  Parish&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or even:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3. Bird
1. McHale
8. Parish&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you’d get the exact same HTML output. The point is, if you want to,
you can use ordinal numbers in your ordered Markdown lists, so that
the numbers in your source match the numbers in your published HTML.
But if you want to be lazy, you don’t have to.&lt;/p&gt;
&lt;p&gt;If you do use lazy list numbering, however, you should still start the
list with the number 1. At some point in the future, Markdown may support
starting ordered lists at an arbitrary number.&lt;/p&gt;
&lt;p&gt;List markers typically start at the left margin, but may be indented by
up to three spaces. List markers must be followed by one or more spaces
or a tab.&lt;/p&gt;
&lt;p&gt;To make lists look nice, you can wrap items with hanging indents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if you want to be lazy, you don’t have to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If list items are separated by blank lines, Markdown will wrap the
items in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags in the HTML output. For example, this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Bird
*   Magic&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Bird&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Magic&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Bird

*   Magic&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Bird&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;p&amp;gt;Magic&amp;lt;/p&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List items may consist of multiple paragraphs. Each subsequent
paragraph in a list item must be indented by either 4 spaces
or one tab:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It looks nice if you indent every line of the subsequent
paragraphs, but here again, Markdown will allow you to be
lazy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&amp;#39;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To put a blockquote within a list item, the blockquote’s &lt;code&gt;&amp;gt;&lt;/code&gt;
delimiters need to be indented:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   A list item with a blockquote:

    &amp;gt; This is a blockquote
    &amp;gt; inside a list item.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To put a code block within a list item, the code block needs
to be indented &lt;em&gt;twice&lt;/em&gt; – 8 spaces or two tabs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   A list item with a code block:

        &amp;lt;code goes here&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It’s worth noting that it’s possible to trigger an ordered list by
accident, by writing something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1986. What a great season.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In other words, a &lt;em&gt;number-period-space&lt;/em&gt; sequence at the beginning of a
line. To avoid this, you can backslash-escape the period:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1986\. What a great season.&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;precode&quot;&gt;Code Blocks&lt;/h3&gt;

&lt;p&gt;Pre-formatted code blocks are used for writing about programming or
markup source code. Rather than forming normal paragraphs, the lines
of a code block are interpreted literally. Markdown wraps a code block
in both &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;p&gt;To produce a code block in Markdown, simply indent every line of the
block by at least 4 spaces or 1 tab. For example, given this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is a normal paragraph:

    This is a code block.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will generate:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is a normal paragraph:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;This is a code block.
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One level of indentation – 4 spaces or 1 tab – is removed from each
line of the code block. For example, this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Here is an example of AppleScript:

    tell application &amp;quot;Foo&amp;quot;
        beep
    end tell&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Here is an example of AppleScript:&amp;lt;/p&amp;gt;

&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;tell application &amp;quot;Foo&amp;quot;
    beep
end tell
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A code block continues until it reaches a line that is not indented
(or the end of the article).&lt;/p&gt;
&lt;p&gt;Within a code block, ampersands (&lt;code&gt;&amp;amp;&lt;/code&gt;) and angle brackets (&lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;)
are automatically converted into HTML entities. This makes it very
easy to include example HTML source code using Markdown – just paste
it and indent it, and Markdown will handle the hassle of encoding the
ampersands and angle brackets. For example, this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;
        &amp;amp;copy; 2004 Foo Corporation
    &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will turn into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;div class=&amp;quot;footer&amp;quot;&amp;amp;gt;
    &amp;amp;amp;copy; 2004 Foo Corporation
&amp;amp;lt;/div&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Regular Markdown syntax is not processed within code blocks. E.g.,
asterisks are just literal asterisks within a code block. This means
it’s also easy to use Markdown to write about Markdown’s own syntax.&lt;/p&gt;
&lt;h3 id=&quot;hr&quot;&gt;Horizontal Rules&lt;/h3&gt;

&lt;p&gt;You can produce a horizontal rule tag (&lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt;) by placing three or
more hyphens, asterisks, or underscores on a line by themselves. If you
wish, you may use spaces between the hyphens or asterisks. Each of the
following lines will produce a horizontal rule:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* * *

***

*****

- - -

---------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&quot;span&quot;&gt;Span Elements&lt;/h2&gt;

&lt;h3 id=&quot;link&quot;&gt;Links&lt;/h3&gt;

&lt;p&gt;Markdown supports two style of links: &lt;em&gt;inline&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In both styles, the link text is delimited by [square brackets].&lt;/p&gt;
&lt;p&gt;To create an inline link, use a set of regular parentheses immediately
after the link text’s closing square bracket. Inside the parentheses,
put the URL where you want the link to point, along with an &lt;em&gt;optional&lt;/em&gt;
title for the link, surrounded in quotes. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example](http://example.com/ &amp;quot;Title&amp;quot;) inline link.

[This link](http://example.net/) has no title attribute.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;This is &amp;lt;a href=&amp;quot;http://example.com/&amp;quot; title=&amp;quot;Title&amp;quot;&amp;gt;
an example&amp;lt;/a&amp;gt; inline link.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://example.net/&amp;quot;&amp;gt;This link&amp;lt;/a&amp;gt; has no
title attribute.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you’re referring to a local resource on the same server, you can
use relative paths:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;See my [About](/about/) page for details.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Reference-style links use a second set of square brackets, inside
which you place a label of your choosing to identify the link:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example][id] reference-style link.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can optionally use a space to separate the sets of brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is [an example] [id] reference-style link.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, anywhere in the document, you define your link label like this,
on a line by itself:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: http://example.com/  &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Square brackets containing the link identifier (optionally
indented from the left margin using up to three spaces);&lt;/li&gt;
&lt;li&gt;followed by a colon;&lt;/li&gt;
&lt;li&gt;followed by one or more spaces (or tabs);&lt;/li&gt;
&lt;li&gt;followed by the URL for the link;&lt;/li&gt;
&lt;li&gt;optionally followed by a title attribute for the link, enclosed
in double or single quotes, or enclosed in parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following three link definitions are equivalent:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is a known bug in Markdown.pl 1.0.1 which prevents
single quotes from being used to delimit link titles.&lt;/p&gt;
&lt;p&gt;The link URL may, optionally, be surrounded by angle brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: &amp;lt;http://example.com/&amp;gt;  &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can put the title attribute on the next line and use extra spaces
or tabs for padding, which tends to look better with longer URLs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: http://example.com/longish/path/to/resource/here
    &amp;quot;Optional Title Here&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Link definitions are only used for creating links during Markdown
processing, and are stripped from your document in the HTML output.&lt;/p&gt;
&lt;p&gt;Link definition names may consist of letters, numbers, spaces, and
punctuation – but they are &lt;em&gt;not&lt;/em&gt; case sensitive. E.g. these two
links:&lt;/p&gt;
&lt;p&gt;  [link text][a]
  [link text][A]&lt;/p&gt;
&lt;p&gt;are equivalent.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;implicit link name&lt;/em&gt; shortcut allows you to omit the name of the
link, in which case the link text itself is used as the name.
Just use an empty set of square brackets – e.g., to link the word
“Google” to the google.com web site, you could simply write:&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://google.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And then define the link:&lt;/p&gt;
&lt;p&gt;Because link names may contain spaces, this shortcut even works for
multiple words in the link text:&lt;/p&gt;
&lt;p&gt;  Visit &lt;a href=&quot;http://daringfireball.net/&quot;&gt;Daring Fireball&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;And then define the link:&lt;/p&gt;
&lt;p&gt;Link definitions can be placed anywhere in your Markdown document. I
tend to put them immediately after each paragraph in which they’re
used, but if you want, you can put them all at the end of your
document, sort of like footnotes.&lt;/p&gt;
&lt;p&gt;Here’s an example of reference links in action:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &amp;quot;Google&amp;quot;
  [2]: http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [3]: http://search.msn.com/    &amp;quot;MSN Search&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using the implicit link name shortcut, you could instead write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &amp;quot;Google&amp;quot;
  [yahoo]:  http://search.yahoo.com/  &amp;quot;Yahoo Search&amp;quot;
  [msn]:    http://search.msn.com/    &amp;quot;MSN Search&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Both of the above examples will produce the following HTML output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;I get 10 times more traffic from &amp;lt;a href=&amp;quot;http://google.com/&amp;quot;
title=&amp;quot;Google&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt; than from
&amp;lt;a href=&amp;quot;http://search.yahoo.com/&amp;quot; title=&amp;quot;Yahoo Search&amp;quot;&amp;gt;Yahoo&amp;lt;/a&amp;gt;
or &amp;lt;a href=&amp;quot;http://search.msn.com/&amp;quot; title=&amp;quot;MSN Search&amp;quot;&amp;gt;MSN&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For comparison, here is the same paragraph written using
Markdown’s inline link style:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I get 10 times more traffic from [Google](http://google.com/ &amp;quot;Google&amp;quot;)
than from [Yahoo](http://search.yahoo.com/ &amp;quot;Yahoo Search&amp;quot;) or
[MSN](http://search.msn.com/ &amp;quot;MSN Search&amp;quot;).&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The point of reference-style links is not that they’re easier to
write. The point is that with reference-style links, your document
source is vastly more readable. Compare the above examples: using
reference-style links, the paragraph itself is only 81 characters
long; with inline-style links, it’s 176 characters; and as raw HTML,
it’s 234 characters. In the raw HTML, there’s more markup than there
is text.&lt;/p&gt;
&lt;p&gt;With Markdown’s reference-style links, a source document much more
closely resembles the final output, as rendered in a browser. By
allowing you to move the markup-related metadata out of the paragraph,
you can add links without interrupting the narrative flow of your
prose.&lt;/p&gt;
&lt;h3 id=&quot;em&quot;&gt;Emphasis&lt;/h3&gt;

&lt;p&gt;Markdown treats asterisks (&lt;code&gt;*&lt;/code&gt;) and underscores (&lt;code&gt;_&lt;/code&gt;) as indicators of
emphasis. Text wrapped with one &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; will be wrapped with an
HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag; double &lt;code&gt;*&lt;/code&gt;‘s or &lt;code&gt;_&lt;/code&gt;‘s will be wrapped with an HTML
&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag. E.g., this input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*single asterisks*

_single underscores_

**double asterisks**

__double underscores__&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;em&amp;gt;single asterisks&amp;lt;/em&amp;gt;

&amp;lt;em&amp;gt;single underscores&amp;lt;/em&amp;gt;

&amp;lt;strong&amp;gt;double asterisks&amp;lt;/strong&amp;gt;

&amp;lt;strong&amp;gt;double underscores&amp;lt;/strong&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can use whichever style you prefer; the lone restriction is that
the same character must be used to open and close an emphasis span.&lt;/p&gt;
&lt;p&gt;Emphasis can be used in the middle of a word:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;un*frigging*believable&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if you surround an &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; with spaces, it’ll be treated as a
literal asterisk or underscore.&lt;/p&gt;
&lt;p&gt;To produce a literal asterisk or underscore at a position where it
would otherwise be used as an emphasis delimiter, you can backslash
escape it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\*this text is surrounded by literal asterisks\*&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;To indicate a span of code, wrap it with backtick quotes (&lt;code&gt;`&lt;/code&gt;).
Unlike a pre-formatted code block, a code span indicates code within a
normal paragraph. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Use the `printf()` function.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;will produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Use the &amp;lt;code&amp;gt;printf()&amp;lt;/code&amp;gt; function.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To include a literal backtick character within a code span, you can use
multiple backticks as the opening and closing delimiters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;``There is a literal backtick (`) here.``&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will produce this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;There is a literal backtick (`) here.&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The backtick delimiters surrounding a code span may include spaces –
one after the opening, one before the closing. This allows you to place
literal backtick characters at the beginning or end of a code span:&lt;/p&gt;
&lt;p&gt;  A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;will produce:&lt;/p&gt;
  &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With a code span, ampersands and angle brackets are encoded as HTML
entities automatically, which makes it easy to include example HTML
tags. Markdown will turn this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Please don&amp;#39;t use any `&amp;lt;blink&amp;gt;` tags.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;Please don&amp;#39;t use any &amp;lt;code&amp;gt;&amp;amp;lt;blink&amp;amp;gt;&amp;lt;/code&amp;gt; tags.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can write this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`&amp;amp;#8212;` is the decimal-encoded equivalent of `&amp;amp;mdash;`.&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to produce:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;&amp;amp;amp;#8212;&amp;lt;/code&amp;gt; is the decimal-encoded
equivalent of &amp;lt;code&amp;gt;&amp;amp;amp;mdash;&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;img&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Admittedly, it’s fairly difficult to devise a “natural” syntax for
placing images into a plain text document format.&lt;/p&gt;
&lt;p&gt;Markdown uses an image syntax that is intended to resemble the syntax
for links, allowing for two styles: &lt;em&gt;inline&lt;/em&gt; and &lt;em&gt;reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Inline image syntax looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &amp;quot;Optional title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An exclamation mark: &lt;code&gt;!&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;followed by a set of square brackets, containing the &lt;code&gt;alt&lt;/code&gt;
attribute text for the image;&lt;/li&gt;
&lt;li&gt;followed by a set of parentheses, containing the URL or path to
the image, and an optional &lt;code&gt;title&lt;/code&gt; attribute enclosed in double
or single quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reference-style image syntax looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![Alt text][id]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where “id” is the name of a defined image reference. Image references
are defined using syntax identical to link references:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[id]: url/to/image  &amp;quot;Optional title attribute&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As of this writing, Markdown has no syntax for specifying the
dimensions of an image; if this is important to you, you can simply
use regular HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;misc&quot;&gt;Miscellaneous&lt;/h2&gt;

&lt;h3 id=&quot;autolink&quot;&gt;Automatic Links&lt;/h3&gt;

&lt;p&gt;Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;http://example.com/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown will turn this into:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://example.com/&amp;quot;&amp;gt;http://example.com/&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Automatic links for email addresses work similarly, except that
Markdown will also perform a bit of randomized decimal and hex
entity-encoding to help obscure your address from address-harvesting
spambots. For example, Markdown will turn this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;address@example.com&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;into something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;amp;#x6D;&amp;amp;#x61;i&amp;amp;#x6C;&amp;amp;#x74;&amp;amp;#x6F;:&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;
&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;
&amp;amp;#109;&amp;quot;&amp;gt;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x64;&amp;amp;#x72;&amp;amp;#x65;&amp;amp;#115;&amp;amp;#115;&amp;amp;#64;&amp;amp;#101;&amp;amp;#120;&amp;amp;#x61;
&amp;amp;#109;&amp;amp;#x70;&amp;amp;#x6C;e&amp;amp;#x2E;&amp;amp;#99;&amp;amp;#111;&amp;amp;#109;&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which will render in a browser as a clickable link to “&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;“.&lt;/p&gt;
&lt;p&gt;(This sort of entity-encoding trick will indeed fool many, if not
most, address-harvesting bots, but it definitely won’t fool all of
them. It’s better than nothing, but an address published in this way
will probably eventually start receiving spam.)&lt;/p&gt;
&lt;h3 id=&quot;backslash&quot;&gt;Backslash Escapes&lt;/h3&gt;

&lt;p&gt;Markdown allows you to use backslash escapes to generate literal
characters which would otherwise have special meaning in Markdown’s
formatting syntax. For example, if you wanted to surround a word
with literal asterisks (instead of an HTML &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag), you can use
backslashes before the asterisks, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\*literal asterisks\*&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Markdown provides backslash escapes for the following characters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;plus sign&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;minus sign (hyphen)
.   dot
!   exclamation mark&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
  </channel>
</rss>